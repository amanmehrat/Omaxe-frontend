[{"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\IfAuth.js":"1","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Loading.js":"2","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\utils\\object.js":"3","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\contexts\\Project.js":"4","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\IfProjectSelected.js":"5","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Sidebar.js":"6","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\project\\Project.js":"7","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\customInputs\\FileUploader.js":"8","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\customInputs\\MyTextInput.js":"9","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\index.js":"10","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\contexts\\Auth.js":"11","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\contexts\\error\\errorContext.js":"12","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Navbar.js":"13","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\FormError.js":"14","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\project\\AddProject.js":"15","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\ExportExcel.js":"16","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\routes\\FlatRoutes.js":"17","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\customInputs\\Search.js":"18","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\NotFound.js":"19","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\flat\\AddFlat.js":"20","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Spinner.js":"21","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\ImportExcel.js":"22","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\routes\\ProjectRoutes.js":"23","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\utils\\func.js":"24","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\customInputs\\MyCheckBox.js":"25","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\flat\\Flat.js":"26","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\config.js":"27","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\NoData.js":"28","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\Billling.js":"29","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\routes\\BillingRoutes.js":"30","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\TransactionsModels.js":"31","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\TransactionGrid.js":"32","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\ViewBills.js":"33","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\Transactions.js":"34","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\CamByIdModels.js":"35","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\views\\DownloadTransactions.js":"36","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\ProjectGrid.js":"37","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\UploadReadings.js":"38","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\WaveOff.js":"39","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\ViewBillsGrid.js":"40","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\WaveOffGrid.js":"41","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\table\\IndeterminateCheckbox.js":"42","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\ElecColModels.js":"43","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\FlatsModels.js":"44","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\ProjectsModels.js":"45","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Dashboard.js":"46","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Login.js":"47","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\project\\Projects.js":"48","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\user\\Users.js":"49","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\ViewHistoryGrid.js":"50","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\GenerateBill.js":"51","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\table\\Table.js":"52","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\utils\\PaidViaSet.js":"53","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\ElecByIdModels.js":"54","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\CamColModels.js":"55","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\report\\DownloadReport.js":"56","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\views\\DownloadBills.js":"57","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\views\\PrintBill.js":"58","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\utils\\hooks.js":"59","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\utils\\exception.js":"60","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\flat\\HistoryModal.js":"61","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\WaveOffModels.js":"62","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\AddPayment.js":"63","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\ChequeBounce.js":"64"},{"size":282,"mtime":1614443209962,"results":"65","hashOfConfig":"66"},{"size":295,"mtime":1611558876000,"results":"67","hashOfConfig":"66"},{"size":1351,"mtime":1611558876000,"results":"68","hashOfConfig":"66"},{"size":1261,"mtime":1614353340846,"results":"69","hashOfConfig":"66"},{"size":318,"mtime":1614443226752,"results":"70","hashOfConfig":"66"},{"size":6392,"mtime":1621705674506,"results":"71","hashOfConfig":"66"},{"size":9475,"mtime":1614649421525,"results":"72","hashOfConfig":"66"},{"size":2375,"mtime":1617761509462,"results":"73","hashOfConfig":"66"},{"size":827,"mtime":1615860561216,"results":"74","hashOfConfig":"66"},{"size":2150,"mtime":1617807562168,"results":"75","hashOfConfig":"66"},{"size":1193,"mtime":1611558876000,"results":"76","hashOfConfig":"66"},{"size":2396,"mtime":1617761532087,"results":"77","hashOfConfig":"66"},{"size":1721,"mtime":1618309466642,"results":"78","hashOfConfig":"66"},{"size":967,"mtime":1611558876000,"results":"79","hashOfConfig":"66"},{"size":19903,"mtime":1621707078983,"results":"80","hashOfConfig":"66"},{"size":5162,"mtime":1617761674941,"results":"81","hashOfConfig":"66"},{"size":581,"mtime":1617759806704,"results":"82","hashOfConfig":"66"},{"size":662,"mtime":1614070258081,"results":"83","hashOfConfig":"66"},{"size":89,"mtime":1614443275850,"results":"84","hashOfConfig":"66"},{"size":23588,"mtime":1619243994846,"results":"85","hashOfConfig":"66"},{"size":639,"mtime":1617761600593,"results":"86","hashOfConfig":"66"},{"size":7955,"mtime":1621706859930,"results":"87","hashOfConfig":"66"},{"size":604,"mtime":1621706634115,"results":"88","hashOfConfig":"66"},{"size":293,"mtime":1614440898591,"results":"89","hashOfConfig":"66"},{"size":968,"mtime":1614441402181,"results":"90","hashOfConfig":"66"},{"size":17738,"mtime":1618330790093,"results":"91","hashOfConfig":"66"},{"size":874,"mtime":1621706263223,"results":"92","hashOfConfig":"66"},{"size":339,"mtime":1616160502199,"results":"93","hashOfConfig":"66"},{"size":15812,"mtime":1617760110899,"results":"94","hashOfConfig":"66"},{"size":1282,"mtime":1617854818410,"results":"95","hashOfConfig":"66"},{"size":1281,"mtime":1621708644119,"results":"96","hashOfConfig":"66"},{"size":801,"mtime":1621704527968,"results":"97","hashOfConfig":"66"},{"size":11570,"mtime":1618194705702,"results":"98","hashOfConfig":"66"},{"size":2801,"mtime":1617814226631,"results":"99","hashOfConfig":"66"},{"size":1058,"mtime":1621163926280,"results":"100","hashOfConfig":"66"},{"size":2842,"mtime":1617850101415,"results":"101","hashOfConfig":"66"},{"size":831,"mtime":1618193968244,"results":"102","hashOfConfig":"66"},{"size":9269,"mtime":1617856643441,"results":"103","hashOfConfig":"66"},{"size":12151,"mtime":1618309618902,"results":"104","hashOfConfig":"66"},{"size":6234,"mtime":1621163816375,"results":"105","hashOfConfig":"66"},{"size":1067,"mtime":1618194180424,"results":"106","hashOfConfig":"66"},{"size":536,"mtime":1616157540996,"results":"107","hashOfConfig":"66"},{"size":3036,"mtime":1618193552848,"results":"108","hashOfConfig":"66"},{"size":2021,"mtime":1618193513976,"results":"109","hashOfConfig":"66"},{"size":1815,"mtime":1618193521800,"results":"110","hashOfConfig":"66"},{"size":1561,"mtime":1621708719165,"results":"111","hashOfConfig":"66"},{"size":4752,"mtime":1615389764155,"results":"112","hashOfConfig":"66"},{"size":2431,"mtime":1618194417357,"results":"113","hashOfConfig":"66"},{"size":15353,"mtime":1617760536207,"results":"114","hashOfConfig":"66"},{"size":1326,"mtime":1618329260495,"results":"115","hashOfConfig":"66"},{"size":14415,"mtime":1617856789345,"results":"116","hashOfConfig":"66"},{"size":6584,"mtime":1618193645735,"results":"117","hashOfConfig":"66"},{"size":253,"mtime":1616254502161,"results":"118","hashOfConfig":"66"},{"size":1016,"mtime":1618190476577,"results":"119","hashOfConfig":"66"},{"size":3143,"mtime":1618193542403,"results":"120","hashOfConfig":"66"},{"size":8437,"mtime":1621697349258,"results":"121","hashOfConfig":"66"},{"size":2738,"mtime":1621689126106,"results":"122","hashOfConfig":"66"},{"size":2699,"mtime":1621585312802,"results":"123","hashOfConfig":"66"},{"size":1490,"mtime":1614481559199,"results":"124","hashOfConfig":"66"},{"size":190,"mtime":1617535884547,"results":"125","hashOfConfig":"66"},{"size":7230,"mtime":1617759019406,"results":"126","hashOfConfig":"66"},{"size":1047,"mtime":1621584989614,"results":"127","hashOfConfig":"66"},{"size":8254,"mtime":1621703319988,"results":"128","hashOfConfig":"66"},{"size":6023,"mtime":1621708692781,"results":"129","hashOfConfig":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},"1acfzf9",{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"144","messages":"145","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"147"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"132"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"132"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"132"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"167"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"210","messages":"211","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"132"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"132"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"167"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"167"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"132"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"132"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"132"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"132"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"257","messages":"258","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"132"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"270","messages":"271","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":1,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276"},"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\IfAuth.js",[],["277","278"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Loading.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\utils\\object.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\contexts\\Project.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\IfProjectSelected.js",[],["279","280"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Sidebar.js",["281","282","283","284","285","286","287","288"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\project\\Project.js",["289","290","291","292","293","294","295","296","297","298","299"],"\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport cm from \"classnames\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useGet, usePost, usePut } from \"../../utils/hooks\";\r\nimport { errorContext } from \"../../components/contexts/error/errorContext\";\r\nimport AuthContext from \"../../components/contexts/Auth\";\r\nimport { useProjectActionsContext } from '../../components/contexts/Project';\r\n\r\nimport Search from '../customInputs/Search';\r\nimport ExportExcel from '../ExportExcel';\r\nimport ImportExcel from '../ImportExcel';\r\nimport Loading from '../Loading';\r\nimport NoData from \"../NoData\";\r\nimport pencil_black from \"../../img/pencil_black.svg\";\r\n\r\nimport './Project.css'\r\n\r\n\r\nconst Project = () => {\r\n    let history = useHistory();\r\n    const { projectId } = useParams();\r\n\r\n    const { user } = useContext(AuthContext);\r\n    const errorCtx = useContext(errorContext);\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [loadFlats, setLoadFlats] = useState(false);\r\n    const [searchText, setSearchText] = useState(\"\");\r\n    const [project, setProject] = useState(null);\r\n    const [flats, setFlats] = useState(null);\r\n    const [oldFlats, setOldFlats] = useState(null);\r\n    const [exportOpen, setExportOpen] = useState(false);\r\n    const [importOpen, setImportOpen] = useState(false);\r\n    const setSelectedProjectId = useProjectActionsContext();\r\n\r\n    const handleExportOpen = () => setExportOpen(true);\r\n    const handleExportClose = () => setExportOpen(false);\r\n    const handleImportOpen = () => setImportOpen(true);\r\n    const handleImportClose = () => setImportOpen(false);\r\n\r\n    const { run: getProjectById } = usePost(\"/projects/GetProject\", null,\r\n        {\r\n            onResolve: (data) => {\r\n                setLoadFlats(false);\r\n                let requiredProject = data?.projects.find(project => project.id == projectId);\r\n                requiredProject.projectsBillingInformations = requiredProject?.projectsBillingInformations?.find(billingInfo => billingInfo.proj_id == projectId);\r\n                setProject(requiredProject);\r\n            },\r\n            onReject: (err) => {\r\n                errorCtx.setError(err);\r\n            }\r\n        });\r\n    const { run: getFlatsList } = usePost(\"/flats\", null,\r\n        {\r\n            onResolve: (data) => {\r\n                setFlats(data.flats);\r\n                setOldFlats(data.flats);\r\n                setLoading(false);\r\n                // if (data && data.flats && data.flats[0] && data.flats[0].project)\r\n                //     setProjectName(data.flats[0].project.name);\r\n                // setTotalNoOfFlat(data.flats.length);\r\n                // setLoading(false);\r\n            },\r\n            onReject: (error) => {\r\n            }\r\n        });\r\n\r\n\r\n    useEffect(() => {\r\n        if (projectId) {\r\n            setLoading(true);\r\n            setSelectedProjectId(projectId);\r\n            getProjectById({ projId: projectId });\r\n            getFlatsList({ projectId: projectId });\r\n        }\r\n    }, [projectId]);\r\n\r\n    useEffect(() => {\r\n        if (projectId && loadFlats) {\r\n            getFlatsList({ projectId: projectId });\r\n        }\r\n    }, [loadFlats]);\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        searchFlats();\r\n    }, [searchText]);\r\n\r\n    const searchFlats = () => {\r\n        const searchValue = searchText;\r\n        let newFlats = [];\r\n        if (searchValue == \"\") {\r\n            newFlats = oldFlats\r\n        } else {\r\n            newFlats = oldFlats.filter(obj => {\r\n                return obj.residentName.toUpperCase().includes(searchValue.toUpperCase())\r\n                    || obj.ownerName.toUpperCase().includes(searchValue.toUpperCase())\r\n                    || obj.flatNumber.toUpperCase().includes(searchValue.toUpperCase())\r\n                    || obj.blockIncharge.toUpperCase().includes(searchValue.toUpperCase())\r\n                    || obj.meterNumber.toUpperCase().includes(searchValue.toUpperCase());\r\n            });\r\n        }\r\n        setFlats(newFlats);\r\n        setLoading(false);\r\n    }\r\n    const goToFlat = (id) => { history.push(\"/flats/\" + id) }\r\n    const goToEditFlat = (id) => { history.push(\"/flat/edit/\" + id) }\r\n    const renderFlats = () => {\r\n        if (flats && flats.length > 0) {\r\n            return [\r\n                flats.map(flat => {\r\n                    let { id, residentName, ownerName, propertyType, flatNumber, blockNumber, projectId } = flat;\r\n                    return (\r\n                        <div key={id} className={cm(\"parentGrid\", { \"parentGrid__active\": false })}\r\n                            onClick={(e) => goToFlat(id)}\r\n                        >\r\n                            <div className=\"child1 \">\r\n                                <p className=\"text pointer\">{flatNumber}</p>\r\n                            </div>\r\n                            <div className=\"child2\">\r\n                                <p className=\"text pointer\">{blockNumber}</p>\r\n                            </div>\r\n                            <div className=\"child3\">\r\n                                <p className=\"text pointer\">{residentName}</p>\r\n                            </div>\r\n                            <div className=\"child4\">\r\n                                <p className=\"text pointer\">{ownerName}</p>\r\n                            </div>\r\n                            <div className=\"child5\">\r\n                                <p className=\"text pointer\">{propertyType === 0 ? \"3BHK\" : \"Others\"}</p>\r\n                            </div>\r\n                            <div className=\"child6\">\r\n                                <Link to={'/flat/edit/' + id} onClick={(e) => e.stopPropagation()}>\r\n                                    <img src={pencil_black}\r\n                                        alt={\"edit\"}\r\n                                        className=\"icon pointer\"\r\n                                    />\r\n                                </Link>\r\n                            </div>\r\n                        </div >\r\n                    )\r\n                })\r\n            ]\r\n        } else {\r\n            return <NoData />;\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"projectId\">\r\n            <div className=\"projectId__header\">\r\n                <div className=\"projectId__body--heading\">\r\n                    <Search\r\n                        setSearchText={setSearchText}\r\n                        searchText={searchText}\r\n                        placeholder=\"Search Flats\"\r\n                    />\r\n                </div>\r\n                <div className=\"projectId__header--filter\">\r\n                    <Link to=\"/flat/add\" className=\"projectId__header--filter--button\" >Add Flat</Link>\r\n                    <button onClick={(e) => { e.stopPropagation(); return handleExportOpen() }} className=\"projectId__header--filter--button\" >Export Excel</button>\r\n                    <button onClick={(e) => { e.stopPropagation(); return handleImportOpen() }} className=\"projectId__header--filter--button\" >Import Excel</button>\r\n                </div>\r\n            </div>\r\n            <ExportExcel\r\n                projectId={project?.id}\r\n                open={exportOpen}\r\n                handleOpen={handleExportOpen}\r\n                handleClose={handleExportClose}\r\n            />\r\n            <ImportExcel\r\n                projectId={project?.id}\r\n                open={importOpen}\r\n                handleOpen={handleImportOpen}\r\n                handleClose={handleImportClose}\r\n                setLoadFlats={setLoadFlats}\r\n            />\r\n            <div className=\"projectId__body\">\r\n                {project ?\r\n                    <div className=\"projectId__body--header\">\r\n                        <div className=\"projectId__body--header-name\">\r\n                            <h1><Link to={\"/project/\" + projectId}><b>{project?.name}</b></Link></h1>\r\n                        </div>\r\n                        <div className=\"projectId__body--header-details\">\r\n                            <h3><b>Total No of Flats:</b> {flats?.length}</h3>\r\n                            <h3><b>Number of Occupied Flats:</b> {flats?.length}</h3>\r\n                            <h3><b>Number of vacant Flats: 0</b></h3><br />\r\n                        </div>\r\n                    </div>\r\n                    : ''}\r\n                <div key={0} className=\"parentGrid gridHeader\">\r\n                    <div className=\"child1\">\r\n                        <p className=\"text pointer\">Flat No.</p>\r\n                    </div>\r\n                    <div className=\"child2\">\r\n                        <p className=\"text pointer\">Block No.</p>\r\n                    </div>\r\n                    <div className=\"child3\">\r\n                        <p className=\"text pointer\">Resident Name</p>\r\n                    </div>\r\n                    <div className=\"child4\">\r\n                        <p className=\"text pointer\">Owner Name</p>\r\n                    </div>\r\n                    <div className=\"child5\">\r\n                        <p className=\"text pointer\">Property Type</p>\r\n                    </div>\r\n                    <div className=\"child6\">\r\n                        <p className=\"text pointer\">Edit</p>\r\n                    </div>\r\n                </div>\r\n                {loading ? <Loading /> : <div className=\"projectGrid\">{renderFlats()}</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Project;\r\n",["300","301"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\customInputs\\FileUploader.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\customInputs\\MyTextInput.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\index.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\contexts\\Auth.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\contexts\\error\\errorContext.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Navbar.js",["302"],"import React, { useContext } from 'react'\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport AuthContext from \"./contexts/Auth\";\r\n\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport './Navbar.css'\r\n\r\nconst Navbar = () => {\r\n    const { user, logout } = useContext(AuthContext);\r\n\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div className=\"navbar__header\">\r\n                <div className=\"navbar__headerLeft\">\r\n                    <Link to=\"/\" className=\"navbar--heading\">Omaxe Facility Manager</Link>\r\n                </div>\r\n                <div className=\"navbar__headerRight\">\r\n                    <ul className=\"rightnavlist\">\r\n                        <li>\r\n                            <span className=\"topnav\">\r\n                                <IconButton>\r\n                                    <Avatar className=\"userprofile navbar__headerRight--Icon\" src=\"https://pbs.twimg.com/profile_images/964867480580636672/7BCvJq4g_400x400.jpg\" />\r\n                                </IconButton>\r\n                            </span>\r\n                            <div className=\"hovermenu\">\r\n                                <NavLink to=\"/\" className=\"hmenulink\">{user.name}{user.role == \"admin\" && <>{\" (Admin)\"}</>}</NavLink>\r\n                                <NavLink to=\"/logout\" className=\"hmenulink\" onClick={logout}> Logout</NavLink>\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <IconButton>\r\n                        <MoreVertIcon className=\"navbar__headerRight--Icon\" />\r\n                    </IconButton> */}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\FormError.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\project\\AddProject.js",["303","304","305","306"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\ExportExcel.js",[],["307","308"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\routes\\FlatRoutes.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\customInputs\\Search.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\NotFound.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\flat\\AddFlat.js",["309","310","311","312"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\nimport { KeyboardDatePicker } from '@material-ui/pickers';\r\n\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport cm from \"classnames\";\r\n\r\nimport Loading from \"../../components/Loading\";\r\n\r\nimport { LogException } from \"../../utils/exception\";\r\n//import './AddFlat.css'\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport MyTextInput from '../../components/customInputs/MyTextInput';\r\nimport MyCheckBox from '../../components/customInputs/MyCheckBox';\r\n\r\nimport { errorContext } from \"../contexts/error/errorContext\";\r\nimport { useProjectContext } from \"../contexts/Project\";\r\nimport AuthContext from \"../../components/contexts/Auth\";\r\nimport { useGet, usePost, usePut } from \"../../utils/hooks\";\r\n\r\nconst phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    error: {\r\n        color: 'red',\r\n        textAlign: 'center',\r\n        fontSize: '12px',\r\n        marginTop: '5px'\r\n    },\r\n    success: {\r\n        color: 'green',\r\n        textAlign: 'center',\r\n        fontSize: '12px',\r\n        marginTop: '5px'\r\n    },\r\n    selectDropdown: {\r\n        color: '#495057',\r\n        border: '1px solid #ced4da',\r\n        outline: 'none',\r\n        fontSize: '14px',\r\n        padding: '10px',\r\n        borderRadius: '100px',\r\n        marginTop: '5px'\r\n    },\r\n    selectInputDiv: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '100%'\r\n\r\n    },\r\n}));\r\n\r\nconst AddFlat = () => {\r\n    const FlatStructure = {\r\n        propertyType: -1,\r\n        residentName: \"\",\r\n        ownerName: \"\",\r\n        flatNumber: \"\",\r\n        floorNumber: \"\",\r\n        blockNumber: \"\",\r\n        area: \"\",\r\n        blockIncharge: \"\",\r\n        dateOfPossession: new Date(),\r\n        meterNumber: \"\",\r\n        hasLift: true,\r\n        hasDG: true,\r\n        sameOwner: false,\r\n        ownerEmail: \"\",\r\n        ownerContact: \"\",\r\n        residentEmail: \"\",\r\n        residentContact: \"\",\r\n    }\r\n    const classes = useStyles();\r\n    const { flatId } = useParams();\r\n    const history = useHistory();\r\n    const errorCtx = useContext(errorContext);\r\n    const { user } = useContext(AuthContext);\r\n    const { selectedProjectId } = useProjectContext();\r\n    if (!selectedProjectId) history.push(\"/projects\");\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const [isEdit, setIsEdit] = useState(false);\r\n    const [isReset, setIsReset] = useState(false);\r\n    const [flat, setFlat] = useState(FlatStructure);\r\n\r\n    const { run: getFlatById } = usePost(\"/flats/getFlat\", null,\r\n        {\r\n            onResolve: (data) => {\r\n                let requiredFlat = data?.flat;\r\n                delete requiredFlat[\"CAMHistories\"];\r\n                delete requiredFlat[\"electricityHistories\"];\r\n                if (requiredFlat.meterNumber == null) requiredFlat.meterNumber = \"\";\r\n                //requiredFlat.hasDG = true;\r\n                //requiredFlat.hasLift = true;\r\n                //setStartDate(new Date(requiredFlat?.dateOfPossession));\r\n                requiredFlat.ownerName = requiredFlat.ownerName == null ? \"\" : requiredFlat.ownerName;\r\n                requiredFlat.residentName = requiredFlat.residentName == null ? \"\" : requiredFlat.residentName;\r\n                requiredFlat.ownerEmail = requiredFlat.ownerEmail == null ? \"\" : requiredFlat.ownerEmail;\r\n                requiredFlat.residentEmail = requiredFlat.residentEmail == null ? \"\" : requiredFlat.residentEmail;\r\n                requiredFlat.ownerContact = requiredFlat.ownerContact == null ? \"\" : requiredFlat.ownerContact;\r\n                requiredFlat.residentContact = requiredFlat.residentContact == null ? \"\" : requiredFlat.residentContact;\r\n\r\n                setFlat(requiredFlat);\r\n                setLoading(false);\r\n            },\r\n            onReject: (err) => {\r\n                LogException(\"Unable To get Flat By Id\", err);\r\n                errorCtx.setError(err);\r\n                setLoading(false);\r\n            }\r\n        });\r\n\r\n\r\n    useEffect(() => {\r\n        if (flatId) {\r\n            setLoading(true);\r\n            setIsEdit(true);\r\n            getFlatById({ flatId: flatId });\r\n        }\r\n    }, [flatId]);\r\n\r\n\r\n    const { run: CreateFlat } = usePost(\"/flats/addFlats\",\r\n        null,\r\n        {\r\n            onResolve: (data) => {\r\n                errorCtx.setSuccess(\"Property Saved Successfully\");\r\n                setIsReset(true);\r\n                history.push(\"/flat/add\");\r\n            },\r\n            onReject: (err) => {\r\n                LogException(\"Unable To Create Property\", err);\r\n                errorCtx.setError(err);\r\n            }\r\n        });\r\n\r\n    const { run: UpdateFlat } = usePost(\"/flats/updateFlat\",\r\n        null,\r\n        {\r\n            onResolve: (data) => {\r\n                errorCtx.setSuccess(\"Property Updated Successfully\");\r\n            },\r\n            onReject: (err) => {\r\n                LogException(\"Unable To Update Property\", err);\r\n                errorCtx.setError(err);\r\n            }\r\n        });\r\n\r\n    const SaveFlat = (values, setSubmitting, resetForm) => {\r\n        delete values[\"sameOwner\"];\r\n        if (isEdit) {\r\n            const updatedProjectId = selectedProjectId;\r\n            delete values[\"projectId\"];\r\n            //values.dateOfPossession = startDate;\r\n            let updatedFlat = { projectId: updatedProjectId, flat: values, updatedBy: user.id };\r\n            //values.projectId = updatedProjectId;\r\n            UpdateFlat(updatedFlat);\r\n            setTimeout(() => {\r\n                setSubmitting(false);\r\n            }, 400);\r\n        } else {\r\n            //values.createdBy = user.id;\r\n            //values.dateOfPossession = startDate;\r\n            let insertedProject = {\r\n                createdBy: user.id,\r\n                projectId: selectedProjectId,\r\n                flats: [values]\r\n            }\r\n            CreateFlat(insertedProject);\r\n            setTimeout(() => {\r\n                setSubmitting(false);\r\n            }, 400);\r\n            resetForm();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isReset) {\r\n            setFlat(FlatStructure);\r\n        }\r\n    }, [isReset])\r\n    const handleSameOwner = (e, values, setFieldValue) => {\r\n        if (e.target.checked) {\r\n            setFieldValue('residentName', values.ownerName);\r\n            setFieldValue('residentEmail', values.ownerEmail);\r\n            setFieldValue('residentContact', values.ownerContact);\r\n        } else {\r\n            setFieldValue('residentName', \"\");\r\n            setFieldValue('residentEmail', \"\");\r\n            setFieldValue('residentContact', \"\");\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className=\"project\">\r\n            <div className=\"project__header\">\r\n                <div className=\"project__body--heading\">{isEdit ? \"Edit\" : \"Add\"} Property</div>\r\n                <div className=\"project__header--filter\">\r\n                    <Link className=\"project__header--filter--button\" to={\"/Project/\" + selectedProjectId} >View All properties</Link>\r\n                </div>\r\n            </div>\r\n            <div className=\"project__body\">\r\n                {\r\n                    loading ? <Loading /> :\r\n                        <>\r\n                            <Formik\r\n                                enableReinitialize={true}\r\n                                validateOnMount={true}\r\n                                initialValues={flat}\r\n                                validationSchema={Yup.object({\r\n                                    residentName: Yup.string()\r\n                                        .required('Required'),\r\n                                    ownerName: Yup.string()\r\n                                        .required('Required'),\r\n                                    flatNumber: Yup.string()\r\n                                        .required('Required'),\r\n                                    floorNumber: Yup.string()\r\n                                        .required('Required'),\r\n                                    blockNumber: Yup.string()\r\n                                        .required('Required'),\r\n                                    area: Yup.string()\r\n                                        .required('Required'),\r\n                                    blockIncharge: Yup.string()\r\n                                        .required('Required'),\r\n                                    dateOfPossession: Yup.string()\r\n                                        .required('Required'),\r\n                                    meterNumber: Yup.string()\r\n                                        .required('Required'),\r\n                                    ownerEmail: Yup.string()\r\n                                        .email(\"Invalid Email\")\r\n                                        .required('Required'),\r\n                                    ownerContact: Yup.string()\r\n                                        .matches(phoneRegExp, 'Invalid PhoneNumber')\r\n                                        .required('Required'),\r\n                                    residentEmail: Yup.string()\r\n                                        .email(\"Invalid Email\")\r\n                                        .required('Required'),\r\n                                    residentContact: Yup.string()\r\n                                        .matches(phoneRegExp, 'Invalid PhoneNumber')\r\n                                        .required('Required')\r\n                                })}\r\n                                onSubmit={(values, { setSubmitting }, resetForm) => {\r\n                                    SaveFlat(values, setSubmitting, resetForm);\r\n                                }}\r\n                                onReset={() => { return FlatStructure; }}\r\n                            >\r\n                                {props => {\r\n                                    const {\r\n                                        isSubmitting,\r\n                                        setFieldValue,\r\n                                        handleChange,\r\n                                        values,\r\n                                        touched,\r\n                                        errors\r\n                                    } = props;\r\n                                    return (\r\n                                        <div className=\"project__body--content\">\r\n                                            <div className=\"project__body--contentBody\">\r\n                                                <Form className=\"ProjectForm\">\r\n                                                    <div className=\"row\">\r\n                                                        <div className=\"form-group\">\r\n                                                            <label className=\"input-label\">Property Type</label>\r\n                                                            <select name=\"propertyType\" defaultValue={flat.propertyType} onChange={handleChange} className={cm(classes.selectDropdown, \"input-text\")} >\r\n                                                                <option value=\"-1\">Choose PropertyType</option>\r\n                                                                <option value=\"1\">1 BHK</option>\r\n                                                                <option value=\"2\">2 BHK</option>\r\n                                                                <option value=\"3\">3 BHK</option>\r\n                                                                <option value=\"4\">4 BHK</option>\r\n                                                                <option value=\"5\">Entire Building</option>\r\n                                                                <option value=\"7\">Villa</option>\r\n                                                                <option value=\"20\">Plot</option>\r\n                                                            </select>\r\n                                                        </div>\r\n                                                        <div className=\"form-group\">\r\n                                                            <label className=\"input-label\">Possession Date</label>\r\n                                                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                                                <KeyboardDatePicker\r\n                                                                    className=\"input-text\"\r\n                                                                    variant=\"inline\"\r\n                                                                    format=\"DD-MM-YYYY\"\r\n                                                                    margin=\"normal\"\r\n                                                                    value={values.dateOfPossession}\r\n                                                                    id=\"date-picker-inline\"\r\n                                                                    name=\"dateOfPossession\"\r\n                                                                    onChange={date => { setFieldValue('dateOfPossession', date.format(\"yyyy-MM-DD\")) }}\r\n                                                                    autoOk\r\n                                                                />\r\n                                                            </MuiPickersUtilsProvider>\r\n                                                            {\r\n                                                                touched.dateOfPossession && errors.dateOfPossession ? (\r\n                                                                    <div className=\"errorLabel\">{errors.dateOfPossession}</div>\r\n                                                                ) : null\r\n                                                            }\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div className=\"row\">\r\n                                                        <MyTextInput\r\n                                                            label=\"Property Number\"\r\n                                                            name=\"flatNumber\"\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Property Number\"\r\n                                                            className=\"input-text wid50\"\r\n                                                        />\r\n                                                        <MyTextInput\r\n                                                            label=\"Floor Number\"\r\n                                                            name=\"floorNumber\"\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Floor Number\"\r\n                                                            className=\"input-text wid50\"\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div className=\"row\">\r\n                                                        <MyTextInput\r\n                                                            label=\"Area\"\r\n                                                            name=\"area\"\r\n                                                            type=\"number\"\r\n                                                            placeholder=\"Area\"\r\n                                                            className=\"input-text wid50\"\r\n                                                        />\r\n                                                        <MyTextInput\r\n                                                            label=\"Block Number\"\r\n                                                            name=\"blockNumber\"\r\n                                                            type=\"Text\"\r\n                                                            placeholder=\"Block Number\"\r\n                                                            className=\"input-text wid50\"\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div className=\"row\">\r\n                                                        <MyTextInput\r\n                                                            label=\"Block Incharge\"\r\n                                                            name=\"blockIncharge\"\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Block Incharge\"\r\n                                                            className=\"input-text wid50\"\r\n                                                        />\r\n                                                        <MyTextInput\r\n                                                            label=\"Meter Number\"\r\n                                                            name=\"meterNumber\"\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Meter Number\"\r\n                                                            className=\"input-text wid50\"\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div className=\"formSubHeading\"><b>Owner Details :</b></div>\r\n                                                    <div className=\"row\">\r\n                                                        <MyTextInput\r\n                                                            label=\"\"\r\n                                                            name=\"ownerName\"\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Owner Name\"\r\n                                                            className=\"input-text wid100\"\r\n                                                        />\r\n                                                        <MyTextInput\r\n                                                            label=\"\"\r\n                                                            name=\"ownerContact\"\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Owner Contact\"\r\n                                                            className=\"input-text wid100\"\r\n                                                        />\r\n                                                        <MyTextInput\r\n                                                            label=\"\"\r\n                                                            name=\"ownerEmail\"\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Owner Email\"\r\n                                                            className=\"input-text wid100\"\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div className=\"formSubHeading\"><b>Resident Details </b>\r\n                                                        <input type=\"checkbox\" name=\"sameOwner\" onChange={(e) => handleSameOwner(e, values, setFieldValue)} style={{ verticalAlign: 'middle', marginRight: '0.26rem' }} />\r\n                                                        (Same as Owner Details)\r\n                                                   </div>\r\n                                                    <div className=\"row\">\r\n                                                        <MyTextInput\r\n                                                            label=\"\"\r\n                                                            name=\"residentName\"\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Resident Name\"\r\n                                                            className=\"input-text wid100\"\r\n                                                        />\r\n                                                        <MyTextInput\r\n                                                            label=\"\"\r\n                                                            name=\"residentContact\"\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Resident Contact\"\r\n                                                            className=\"input-text wid100\"\r\n                                                        />\r\n                                                        <MyTextInput\r\n                                                            label=\"\"\r\n                                                            name=\"residentEmail\"\r\n                                                            type=\"text\"\r\n                                                            placeholder=\"Resident Email\"\r\n                                                            className=\"input-text wid100\"\r\n                                                        />\r\n                                                    </div>\r\n                                                    <div className=\"row\">\r\n                                                        <MyCheckBox name=\"hasLift\">\r\n                                                            Is Lift Present\r\n                                                        </MyCheckBox>\r\n                                                        <MyCheckBox name=\"hasDG\">\r\n                                                            Is DG Present\r\n                                                        </MyCheckBox>\r\n                                                    </div>\r\n                                                    <div className=\"row btn-group\">\r\n                                                        <button disabled={isSubmitting} className={cm(\"blue_button\", \"dbutton\", \"editUp\", \"btn\")} type=\"submit\">\r\n                                                            {isEdit ? \"Update\" : \"Save\"}\r\n                                                        </button>\r\n                                                        <button className={cm(\"grey_button\", \"dbutton\", \"btn\")} type=\"reset\">Cancel</button>\r\n                                                    </div>\r\n                                                </Form>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                }}\r\n                            </Formik>\r\n                        </>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddFlat;\r\n","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Spinner.js",["313"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\ImportExcel.js",["314"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\routes\\ProjectRoutes.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\utils\\func.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\customInputs\\MyCheckBox.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\flat\\Flat.js",["315","316","317","318","319","320"],"import { useParams, Link, useHistory } from 'react-router-dom';\r\nimport React, { useState, useEffect, useContext } from 'react';\r\n\r\nimport { usePost } from \"../../utils/hooks\";\r\nimport NoData from \"../NoData\";\r\nimport Loading from \"../Loading\";\r\nimport ViewHistoryGrid from '../grid/ViewHistoryGrid';\r\nimport HistoryModal from './HistoryModal';\r\nimport { LogException } from \"../../utils/exception\";\r\nimport { useProjectActionsContext, useProjectContext } from '../../components/contexts/Project';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PropertyType from '../../utils/PropertyTypeSet';\r\n\r\nimport axios from 'axios';\r\nimport config from '../../config';\r\nimport AuthContext from \"../contexts/Auth\";\r\nimport cm from \"classnames\";\r\nimport PrintOutlinedIcon from '@material-ui/icons/PrintOutlined';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        width: '80%',\r\n        margin: '10px',\r\n        height: 'calc(100vh - 7rem)',\r\n        flexDirection: 'column'\r\n    },\r\n    Details: {\r\n        color: '#637390',\r\n        borderRadius: '0.5rem',\r\n        backgroundColor: 'white',\r\n        padding: '1rem 1.2rem 1rem 1.2rem',\r\n        margin: '0 0 1.5rem 0.4rem',\r\n        fontSize: '1rem',\r\n    },\r\n    body: {\r\n        backgroundColor: '#ececec',\r\n        padding: '1.3rem',\r\n        height: '100%'\r\n    },\r\n    tableRow: {\r\n        display: 'flex',\r\n        width: '100%',\r\n        fontSize: '1.8rem',\r\n        justifyContent: 'space-between',\r\n    },\r\n    tableItem: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        margin: '3px 5px',\r\n        padding: '2px',\r\n        alignItems: 'center'\r\n    },\r\n    tableItemKey: { width: '50%' },\r\n    tableItemValue: { width: '50%' },\r\n    table: {\r\n        borderRadius: '0.5rem',\r\n        backgroundColor: 'white',\r\n        margin: '0.2rem 0.4rem',\r\n        padding: '0.5rem',\r\n        fontSize: '1.5rem',\r\n        textAlign: 'center',\r\n        width: '100%',\r\n        color: '#637390',\r\n    },\r\n    tableHead: {},\r\n    tableBody: {},\r\n    tableBodyRow: {},\r\n    tableBodyRowItem: {},\r\n    subHeading: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        textAlign: 'center',\r\n        padding: '0rem 1rem',\r\n        fontSize: '1.5rem',\r\n        backgroundColor: 'white',\r\n        color: '#637390'\r\n    },\r\n    subHeadingText: {},\r\n    noData: {\r\n        textAlign: 'center',\r\n        border: '1px solid #637390',\r\n        color: \"#637390\",\r\n        fontSize: '1.2rem',\r\n        marginBottom: '20px'\r\n    },\r\n}));\r\n\r\nconst Flat = () => {\r\n    const classes = useStyles();\r\n    const { flatId } = useParams();\r\n    const history = useHistory();\r\n    const { user } = useContext(AuthContext);\r\n    const [selectedCamBills, setSelectedCamBills] = useState([])\r\n    const [selectedElecBills, setSelectedElecBills] = useState([])\r\n\r\n    const [loading, setLoading] = useState(true)\r\n    const [flatDetails, setFlatDetails] = useState({});\r\n    const [electricityHistory, setElectricityHistory] = useState([]);\r\n    const [camHistory, setCamHistory] = useState([]);\r\n\r\n    const [loadElectricity, setLoadElectricity] = useState(true);\r\n    const [loadCam, setLoadCam] = useState(true);\r\n    const [request, setRequest] = useState({\r\n        flatId: flatId,\r\n        fetchBy: 1,\r\n        fetchData: {\r\n            month: new Date().getMonth() + 1,\r\n            year: new Date().getFullYear()\r\n        }\r\n    });\r\n\r\n    const [popUpOpen, setPopUpOpen] = useState(false);\r\n    const [popUpFor, setPopUpFor] = useState(\"\");\r\n\r\n    const handlePopUpOpen = (id) => { setPopUpFor(id); setPopUpOpen(true) };\r\n    const handlePopUpClose = () => setPopUpOpen(false);\r\n\r\n    const setSelectedProjectId = useProjectActionsContext();\r\n    const { selectedProjectId } = useProjectContext();\r\n\r\n    const { run: getFlatDetails } = usePost(\"/flats/getFlat\", null,\r\n        {\r\n            onResolve: (data) => {\r\n                setSelectedProjectId(data.flat.projectId);\r\n                setFlatDetails(data.flat);\r\n                setLoading(false);\r\n                if (data.flat?.CAMHistories?.length > 0) {\r\n                    setCamHistory(data.flat?.CAMHistories);\r\n                }\r\n                if (data.flat?.electricityHistories?.length > 0) {\r\n                    setElectricityHistory(data.flat?.electricityHistories);\r\n                }\r\n            },\r\n            onReject: (err) => {\r\n                LogException(\"Unable To get Flat Details\", err);\r\n            }\r\n        });\r\n\r\n    const { run: getElectricityDetails } = usePost(\"/electricityDetails/GetElectricityDetailsByFlatId\", null,\r\n        {\r\n            onResolve: (data) => {\r\n                setLoadElectricity(false)\r\n                setElectricityHistory(data.elecDetail);\r\n            },\r\n            onReject: (err) => {\r\n                setLoadElectricity(false)\r\n                LogException(\"Unable To get Electricity Details\", err);\r\n            }\r\n        });\r\n\r\n    const { run: getCamDetails } = usePost(\"/camDetails/getCamById\", null,\r\n        {\r\n            onResolve: (data) => {\r\n                setLoadCam(false)\r\n                setCamHistory(data.camDetail);\r\n            },\r\n            onReject: (err) => {\r\n                setLoadCam(false)\r\n                LogException(\"Unable To get Cam details Details\", err);\r\n            }\r\n        });\r\n\r\n    useEffect(() => {\r\n        if (flatId) {\r\n            setLoading(true);\r\n            getFlatDetails({ flatId });\r\n        }\r\n    }, [flatId]);\r\n\r\n    useEffect(() => {\r\n        if (loadElectricity) {\r\n            getElectricityDetails(request);\r\n        }\r\n    }, [loadElectricity]);\r\n\r\n    useEffect(() => {\r\n        if (loadCam) {\r\n            getCamDetails(request);\r\n        }\r\n    }, [loadCam]);\r\n\r\n    const downloadCamHistory = () => {\r\n        axios.post(`${config.restApiBase}/camDetails/getCamById`,\r\n            {\r\n                flatId: flatId,\r\n                fetchBy: 3,\r\n                fetchData: request.fetchData\r\n            }\r\n        ).then(response => {\r\n            let { data } = response;\r\n            if (data && data.meta) {\r\n                LogException(\"Unable To Download Cam history. Please Contact To Tech-Team\");\r\n            } else {\r\n                const url = window.URL.createObjectURL(new Blob([response.data]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.setAttribute('download', `Camhistory-${request.year}.csv`);\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.remove();\r\n            }\r\n        }).catch((error) => {\r\n            setLoading(false);\r\n            LogException(\"Unable To Download Cam History excel\" + error);\r\n        });\r\n    }\r\n\r\n    const downloadElecHistory = () => {\r\n        axios.post(`${config.restApiBase}/electricityDetails/GetElectricityDetailsByFlatId`,\r\n            {\r\n                flatId: flatId,\r\n                fetchBy: 3,\r\n                fetchData: request.fetchData\r\n            }\r\n        ).then(response => {\r\n            let { data } = response;\r\n            if (data && data.meta) {\r\n                LogException(\"Unable To Download Electricity history. Please Contact To Tech-Team\");\r\n            } else {\r\n                const url = window.URL.createObjectURL(new Blob([response.data]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.setAttribute('download', `Electricityhistory-${request.year}.csv`);\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.remove();\r\n            }\r\n        }).catch((error) => {\r\n            setLoading(false);\r\n            LogException(\"Unable To Download Electricity History excel\" + error);\r\n        });\r\n    }\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className={classes.container}>\r\n                <div className=\"project__header\">\r\n                    <div className=\"project__body--heading\">Property Details</div>\r\n                    <div className=\"project__header--filter\">\r\n                        <Link className=\"project__header--filter--button\" to={\"/project/\" + setSelectedProjectId} >View All Properties</Link>\r\n                    </div>\r\n                </div>\r\n                <div className={classes.body}>\r\n                    <Loading />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className=\"project__header\">\r\n                <div className=\"project__body--heading\">Property Details</div>\r\n                <div className=\"project__header--filter\">\r\n                    {\r\n                        (flatDetails && user && user.role == \"admin\") &&\r\n                        <button\r\n                            className=\"project__header--filter--button\"\r\n                            onClick={(e) => { e.stopPropagation(); history.push('/flat/edit/' + flatDetails.id); }}\r\n                        >\r\n                            Edit Property\r\n                    </button>\r\n                    }\r\n                    <Link className=\"project__header--filter--button\" to={\"/Project/\" + selectedProjectId} >View All properties</Link>\r\n                </div>\r\n            </div>\r\n            <div className={classes.body}>\r\n                {(flatDetails ?\r\n                    (\r\n                        <div className={classes.Details}>\r\n                            <div className={classes.tableRow}>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Property Number:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.flatNumber}</div>\r\n                                </div>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Floor Number:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.floorNumber}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.tableRow}>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Block No:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.blockNumber}</div>\r\n                                </div>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Area:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.area}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.tableRow}>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Owner Name:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.ownerName}</div>\r\n                                </div>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Resident Name:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.residentName}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.tableRow}>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Owner Email:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.ownerEmail}</div>\r\n                                </div>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Owner Contact:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.ownerContact}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.tableRow}>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Date Of Possession:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.dateOfPossession}</div>\r\n                                </div>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Meter Number:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.meterNumber}</div>\r\n                                </div>\r\n                            </div>\r\n                            <div className={classes.tableRow}>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Block Incharge:</b></label>\r\n                                    <div className={classes.tableItemValue}>{flatDetails.blockIncharge}</div>\r\n                                </div>\r\n                                <div className={classes.tableItem}>\r\n                                    <label className={classes.tableItemKey}><b>Property Type:</b></label>\r\n                                    <div className={classes.tableItemValue}>{PropertyType.get(flatDetails.propertyType)}</div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                    : <NoData />)\r\n                }\r\n                <div className={classes.subHeading}>\r\n                    <div className={classes.subHeadingText}><b>CAM History</b></div>\r\n                    <div className=\"project__header--filter\">\r\n                        <button onClick={(e) => { e.stopPropagation(); return handlePopUpOpen(\"Cam\"); }} className=\"projectId__header--filter--button\" >View</button>\r\n                        {(request.fetchBy == 2 && camHistory && camHistory.length > 0) && <button onClick={(e) => { e.stopPropagation(); return downloadCamHistory(); }} className=\"projectId__header--filter--button\" >Download</button>}\r\n                        {(camHistory.length > 0) && <>\r\n                            <Link\r\n                                to={'/Bills/1'}\r\n                                className={cm(\"project__header--filter--button\", \"materialBtn\")}\r\n                                target=\"_blank\"\r\n                                onClick={() => { localStorage.setItem(\"downloadBillIds\", selectedCamBills.map(d => d.original.id)) }}\r\n                            >\r\n                                <PrintOutlinedIcon />Print Bills\r\n                            </Link>\r\n                        </>}\r\n                    </div>\r\n                </div>\r\n                {(camHistory && camHistory.length > 0) ?\r\n                    <ViewHistoryGrid bills={camHistory} billType={1} setBills={setSelectedCamBills} />\r\n                    : <div className={classes.noData}>{loadCam ? \"Loading...\" : \"No Bill In History\"}</div>\r\n                }\r\n                <div className={classes.subHeading}>\r\n                    <div className={classes.subHeadingText}><b>Electricity History</b></div>\r\n                    <div className=\"project__header--filter\">\r\n                        <button onClick={(e) => { e.stopPropagation(); return handlePopUpOpen(\"Electricity\"); }} className=\"projectId__header--filter--button\" >View</button>\r\n                        {(request.fetchBy == 2 && electricityHistory && electricityHistory.length > 0) && <button onClick={(e) => { e.stopPropagation(); return downloadElecHistory(); }} className=\"projectId__header--filter--button\" >Download</button>}\r\n                        {(electricityHistory.length > 0) && <>\r\n                            <Link\r\n                                to={'/Bills/2'}\r\n                                className={cm(\"project__header--filter--button\", \"materialBtn\")}\r\n                                target=\"_blank\"\r\n                                onClick={() => { localStorage.setItem(\"downloadBillIds\", selectedElecBills.map(d => d.original.id)) }}\r\n                            >\r\n                                <PrintOutlinedIcon />Print Bills\r\n                            </Link>\r\n                        </>}\r\n                    </div>\r\n                </div>\r\n                {(electricityHistory && electricityHistory.length > 0) ?\r\n                    <ViewHistoryGrid bills={electricityHistory} billType={2} setBills={setSelectedElecBills} />\r\n                    : <div className={classes.noData}>{loadElectricity ? \"Loading...\" : \"No Bill In History\"}</div>\r\n                }\r\n            </div>\r\n            <HistoryModal\r\n                open={popUpOpen}\r\n                handlePopUpClose={handlePopUpClose}\r\n                popUpFor={popUpFor}\r\n                flatId={flatId}\r\n                setLoadElectricity={setLoadElectricity}\r\n                setLoadCam={setLoadCam}\r\n                setRequest={setRequest}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Flat;","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\config.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\NoData.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\Billling.js",["321","322","323","324","325","326","327","328","329","330"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\routes\\BillingRoutes.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\TransactionsModels.js",["331"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\TransactionGrid.js",["332"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\ViewBills.js",["333","334","335"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\nimport { KeyboardDatePicker } from '@material-ui/pickers';\r\nimport React, { useState, useEffect, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ViewBillsGrid from '../grid/ViewBillsGrid'\r\nimport NoData from '../NoData';\r\nimport PaidVia from '../../utils/PaidViaSet';\r\nimport { Link } from 'react-router-dom';\r\nimport cm from \"classnames\";\r\n\r\nimport Loading from \"../../components/Loading\";\r\n\r\nimport { LogException } from \"../../utils/exception\";\r\n\r\nimport { Formik, Form } from 'formik';\r\n\r\nimport { useProjectContext } from \"../contexts/Project\";\r\nimport { usePost } from \"../../utils/hooks\";\r\n\r\nimport axios from 'axios';\r\nimport config from '../../config';\r\nimport AuthContext from \"../contexts/Auth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    groups: {\r\n        display: 'inline-block',\r\n    },\r\n    dropdownDiv: {\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        float: 'left',\r\n        width: '28%'\r\n    },\r\n    selectDropdown: {\r\n        color: '#495057',\r\n        border: '1px solid #ced4da',\r\n        outline: 'none',\r\n        fontSize: '14px',\r\n        padding: '7px',\r\n        borderRadius: '100px',\r\n        marginTop: '11px',\r\n        width: '80%'\r\n    },\r\n    selectInputDiv: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '100%'\r\n    },\r\n    formBorder: {\r\n        border: '1px solid rgba(211,211,211,0.3)',\r\n        padding: '12px',\r\n        marginBottom: '20px'\r\n    },\r\n    btnGroups: {\r\n        width: '26%',\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n        textAlign: 'center',\r\n        justifyContent: 'space-between',\r\n    }\r\n}));\r\n\r\nconst ViewBills = () => {\r\n    const RequestStructure = {\r\n        billType: -1,\r\n        year: \"\",\r\n        month: \"\",\r\n        projId: \"\",\r\n    }\r\n    const { user } = useContext(AuthContext);\r\n    const [bills, setBills] = useState(-1);\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const { selectedProjectId } = useProjectContext();\r\n    if (!selectedProjectId) history.push(\"/projects\");\r\n\r\n\r\n    const [billType, setBillType] = useState(-1)\r\n    const [viewBillRequest, setViewBillRequest] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [loadViewBills, setLoadViewBills] = useState(false);\r\n    const [selectedYear, setSelectedYear] = useState(new Date());\r\n    const [selectedMonth, setSelectedMonth] = useState(new Date());\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const { run: viewBills } = usePost(\"/billing/viewBills\",\r\n        null,\r\n        {\r\n            onResolve: (data) => {\r\n                if (typeof data.Bills == \"string\") {\r\n                    data.Bills = [];\r\n                }\r\n                data.Bills.map(item => { item.paidVia = PaidVia.get(item.paidVia); return item; })\r\n                setBills(data.Bills);\r\n                setLoading(false);\r\n            },\r\n            onReject: (err) => {\r\n                setBills([]);\r\n                setError(\"Unable To view electricity bill, Please Contact Tech-Team\");\r\n                setLoading(false);\r\n                LogException(\"Unable To View bills\", err);\r\n            }\r\n        });\r\n\r\n    const getViewBills = (values) => {\r\n        setError(\"\");\r\n        setLoading(true);\r\n        let billObject = {\r\n            projId: selectedProjectId,\r\n            year: new Date(selectedYear).getFullYear().toString(),\r\n            month: (new Date(selectedMonth).getMonth() + 1).toString(),\r\n            //createdBy = user.id,\r\n            billType: parseInt(values.billType)\r\n        }\r\n        setBillType(values.billType);\r\n        setViewBillRequest(billObject);\r\n        viewBills(billObject);\r\n    }\r\n    const getExportBills = (values) => {\r\n        setError(\"\");\r\n        let exportObject = {\r\n            projId: selectedProjectId,\r\n            year: new Date(selectedYear).getFullYear().toString(),\r\n            month: (new Date(selectedMonth).getMonth() + 1).toString(),\r\n            //createdBy = user.id,\r\n            billType: parseInt(values.billType)\r\n        }\r\n        //setBillType(values.billType);\r\n        //setViewBillRequest(values);\r\n        //viewBills(values);\r\n        axios.post(`${config.restApiBase}/billing/downloadBillsCSV`,\r\n            exportObject\r\n        ).then(response => {\r\n            let { data } = response;\r\n            if (data && data.meta) {\r\n                LogException(\"Unable To Download Excel. Please Contact To Tech-Team\");\r\n            } else {\r\n                const url = window.URL.createObjectURL(new Blob([response.data]));\r\n                const link = document.createElement('a');\r\n                link.href = url;\r\n                link.setAttribute('download', `Bills-${exportObject.month}-${exportObject.year}.csv`);\r\n                document.body.appendChild(link);\r\n                link.click();\r\n                link.remove();\r\n            }\r\n        }).catch((error) => {\r\n            setError(\"Unable to download Excel\");\r\n            LogException(\"Unable To Download view bill excel\" + error);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (loadViewBills) {\r\n            viewBills(viewBillRequest);\r\n            setLoadViewBills(false);\r\n        }\r\n\r\n    }, [loadViewBills]);\r\n\r\n    const renderViewTable = () => {\r\n        if (loading) {\r\n            return <Loading />\r\n        } if (bills == -1) {\r\n            return \"\";\r\n        } else if (bills && bills.length > 0) {\r\n            return <ViewBillsGrid bills={bills} billType={billType} setLoadViewBills={setLoadViewBills} />\r\n        } else {\r\n            return <NoData text=\"No Bills Found\" />;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"project\">\r\n            <div className=\"project__header\">\r\n                <div className=\"project__body--heading\">View Bills</div>\r\n                <div className=\"project__header--filter\">\r\n                    {(user && user.role == \"admin\") && <Link className=\"project__header--filter--button\" to={\"/billing/generateBills\"} >Generate Bill</Link>}\r\n                </div>\r\n            </div>\r\n            <div className=\"project__body\">\r\n                <div className=\"project__body--content\">\r\n                    <div className=\"project__body--contentBody\">\r\n                        <Formik\r\n                            initialValues={RequestStructure}\r\n                            onSubmit={(values) => {\r\n                                getViewBills(values);\r\n                            }}\r\n                        >\r\n                            {props => {\r\n                                const {\r\n                                    handleChange,\r\n                                    values\r\n                                } = props;\r\n                                return (\r\n                                    <Form className={cm(classes.formBorder, \"ProjectForm\")}>\r\n                                        <div className={cm(classes.dropdownDiv)}>\r\n                                            <label className=\"input-label\">Bill Type</label>\r\n                                            <select name=\"billType\" onChange={handleChange} className={cm(classes.selectDropdown, \"input-text\")} >\r\n                                                <option value=\"-1\">Choose Bill Type</option>\r\n                                                <option value=\"1\">Cam</option>\r\n                                                <option value=\"2\">Electricity</option>\r\n                                                <option value=\"3\">Adhoc</option>\r\n                                            </select>\r\n                                        </div>\r\n                                        <div className={cm(classes.groups, \"wid23\")}>\r\n                                            <label className=\"input-label\">Select Year</label>\r\n                                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                                <KeyboardDatePicker\r\n                                                    className=\"input-text\"\r\n                                                    variant=\"inline\"\r\n                                                    format=\"YYYY\"\r\n                                                    views={[\"year\"]}\r\n                                                    margin=\"normal\"\r\n                                                    id=\"date-picker-inline\"\r\n                                                    name=\"year\"\r\n                                                    value={selectedYear}\r\n                                                    onChange={date => { setSelectedYear(date); }}\r\n                                                    autoOk\r\n                                                />\r\n                                            </MuiPickersUtilsProvider>\r\n                                        </div>\r\n                                        <div className={cm(classes.groups, \"wid23\")}>\r\n                                            <label className=\"input-label\">Select Month</label>\r\n                                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                                <KeyboardDatePicker\r\n                                                    className=\"input-text\"\r\n                                                    variant=\"inline\"\r\n                                                    format=\"MMM\"\r\n                                                    views={[\"month\"]}\r\n                                                    margin=\"normal\"\r\n                                                    id=\"date-picker-inline\"\r\n                                                    name=\"month\"\r\n                                                    value={selectedMonth}\r\n                                                    onChange={date => { setSelectedMonth(date); }}\r\n                                                    autoOk\r\n                                                />\r\n                                            </MuiPickersUtilsProvider>\r\n                                        </div>\r\n                                        <div className={classes.btnGroups}>\r\n                                            <button className={cm(\"project__header--filter--button materialBtn\")} type=\"submit\">\r\n                                                View Bills\r\n                                            </button>\r\n                                            <span>OR</span>\r\n                                            <button className={cm(\"project__header--filter--button materialBtn\")}\r\n                                                onClick={(e) => { e.preventDefault(); getExportBills(values) }}\r\n                                            >\r\n                                                Export Data\r\n                                            </button>\r\n                                        </div>\r\n                                    </Form>\r\n                                );\r\n                            }}\r\n                        </Formik>\r\n                        {error && <div className=\"error\">{error}</div>}\r\n                        {renderViewTable()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default React.memo(ViewBills);\r\n","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\Transactions.js",["336"],"import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport NoData from \"../NoData\";\r\nimport { LogException } from \"../../utils/exception\";\r\nimport { useGet } from \"../../utils/hooks\";\r\n\r\nimport TransactionGrid from \"../grid/TransactionGrid\";\r\nimport Loading from \"../../components/Loading\";\r\n\r\n\r\nconst Transactions = () => {\r\n    const history = useHistory();\r\n    const billId = localStorage.getItem('billId');\r\n    const flatId = localStorage.getItem('flatId');\r\n\r\n    if (!billId) history.push(\"/billing/viewbills\");\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const [transactions, setTransactions] = useState(null);\r\n\r\n    const { run: getTransactions } = useGet(\"/billing/getTransactions/\" + billId, null,\r\n        {\r\n            onResolve: (data) => {\r\n                if (data?.transactionsData) {\r\n                    setTransactions(data.transactionsData);\r\n                } else {\r\n                    //errorCtx.setError(\"Unable To fetch Transactions\");\r\n                    setTransactions([]);\r\n                    LogException(\"Unable To fetch Transactions\", data);\r\n                }\r\n                setLoading(false);\r\n            },\r\n            onReject: (err) => {\r\n                LogException(\"Unable To fetch Transactions\", err);\r\n            }\r\n        });\r\n\r\n\r\n    useEffect(() => {\r\n        if (billId) {\r\n            getTransactions();\r\n        }\r\n    }, [billId]);\r\n\r\n\r\n    const renderTransactions = () => {\r\n        if (loading) {\r\n            return <Loading />\r\n        } if (transactions == null) {\r\n            return \"\";\r\n        } else if (transactions && transactions.length > 0) {\r\n            return <TransactionGrid transactions={transactions} />\r\n        } else {\r\n            return <NoData text=\"No Transactions Found\" />;\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"project\">\r\n            <div className=\"project__header\">\r\n                <div className=\"project__body--heading\">Transactions</div>\r\n                <div className=\"project__header--filter\">\r\n                    <Link to='/billing/viewbills' className=\"project__header--filter--button\">View Bills</Link>\r\n                    <Link target=\"_blank\" to={'/Receipts/' + billId + '/' + flatId} className=\"project__header--filter--button\">Downloads</Link>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"project__body\">\r\n                <div className=\"project__body--content\">\r\n                    <div className=\"project__body--contentBody\">\r\n                        {loading ? <Loading /> : renderTransactions()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Transactions;\r\n","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\CamByIdModels.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\views\\DownloadTransactions.js",["337","338"],"\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport config from '../../config';\r\nimport parse from 'html-react-parser';\r\nimport ReactToPrint from 'react-to-print';\r\nimport { LogException } from '../../utils/exception';\r\nexport class Receipt extends React.PureComponent {\r\n    render() {\r\n        return (<>{this.props.reciepts != null && <>{parse(this.props.reciepts)}</>}</>)\r\n    }\r\n}\r\n\r\n\r\nconst DownloadTransactions = () => {\r\n    const componentRef = useRef();\r\n    const { billId } = useParams();\r\n    const { flatId } = useParams();\r\n    const { transactionId } = useParams();\r\n    const [reciepts, setReciepts] = useState(null);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const DownloadURL = `${config.restApiBase}/billing/getTransactions/${billId}/${flatId}/${transactionId != undefined ? transactionId : \"\"}`;\r\n    const downloadTransactions = () => {\r\n        axios.get(DownloadURL).then(response => {\r\n            let { data } = response;\r\n            console.log(data);\r\n            if (data?.meta?.message) {\r\n                setError(\"Unable to View Receipts, Cause-\" + data?.meta?.message);\r\n                LogException(\"Unable To Download receipts. Please Contact To Tech-Team\", data.error);\r\n            } else {\r\n                setReciepts(data);\r\n            }\r\n\r\n            // if (data && data.meta) {\r\n            //     LogException(\"Unable To Download receipts. Please Contact To Tech-Team\");\r\n            // } else {\r\n            //     const url = window.URL.createObjectURL(new Blob([response.data]));\r\n            //     const link = document.createElement('a');\r\n            //     link.href = url;\r\n            //     link.setAttribute('download', `transactions-${billId}.pdf`);\r\n            //     document.body.appendChild(link);\r\n            //     link.click();\r\n            //     link.remove();\r\n            // }\r\n        }).catch((error) => {\r\n            setError(\"Unable to View Receipts\");\r\n            LogException(\"Unable To Download Transaction\" + error);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (billId && flatId)\r\n            downloadTransactions();\r\n    }, [billId])\r\n    return (\r\n        <>\r\n            {reciepts != null &&\r\n                <>\r\n                    <ReactToPrint\r\n                        trigger={() => <button>Print this out!</button>}\r\n                        content={() => componentRef.current}\r\n                        documentTitle={\"Omaxe-Receipt_\" + billId}\r\n                    />\r\n                    <Receipt ref={componentRef} reciepts={reciepts} />\r\n                </>\r\n            }\r\n            {error && <div style={{ marginTop: \"10%\" }} className=\"error\">{error}</div>}\r\n        </>\r\n    )\r\n\r\n}\r\nexport default DownloadTransactions;\r\n\r\n\r\n","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\ProjectGrid.js",["339"],"import React, { useContext } from 'react'\r\nimport ProjectsModels from './colmodels/ProjectsModels';\r\nimport Table from './table/Table';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthContext from \"../contexts/Auth\";\r\n\r\nconst ProjectGrid = ({ projects }) => {\r\n    const history = useHistory();\r\n    let models = ProjectsModels;\r\n    const columns = [...models()]\r\n    const data = React.useMemo(() => projects, [projects]);\r\n    const { user } = useContext(AuthContext);\r\n    return (\r\n        <>\r\n            <Table\r\n                columns={columns}\r\n                data={data}\r\n                onHandleRowClick={id => { history.push(\"/project/\" + id) }}\r\n                hiddenColumns={(user && user.role == \"admin\") ? [] : [\"Payment\", \"Edit\"]}\r\n            />\r\n        </>\r\n    )\r\n}\r\nexport default ProjectGrid;\r\n","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\UploadReadings.js",["340","341","342","343","344"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\nimport { KeyboardDatePicker } from '@material-ui/pickers';\r\nimport React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport cm from \"classnames\";\r\nimport parse from 'html-react-parser';\r\nimport Loading from \"../../components/Loading\";\r\nimport FileUploader from '../customInputs/FileUploader';\r\nimport { LogException } from \"../../utils/exception\";\r\nimport { useProjectContext } from \"../contexts/Project\";\r\nimport axios from 'axios';\r\nimport config from '../../config';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    groups: {\r\n        display: 'inline-block',\r\n    },\r\n    dropdownDiv: {\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        float: 'left',\r\n        width: '28%'\r\n    },\r\n    selectDropdown: {\r\n        color: '#495057',\r\n        border: '1px solid #ced4da',\r\n        outline: 'none',\r\n        fontSize: '14px',\r\n        padding: '7px',\r\n        borderRadius: '100px',\r\n        marginTop: '11px',\r\n        width: '80%'\r\n    },\r\n    selectInputDiv: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '100%'\r\n    },\r\n    formBorder: {\r\n        border: '1px solid rgba(211,211,211,0.3)',\r\n        padding: '12px',\r\n        marginBottom: '20px',\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    btnGroups: {\r\n        width: '25%',\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n        textAlign: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    fileUploader: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '28%',\r\n        padding: '1.1rem'\r\n    },\r\n    newCustom: {\r\n        marginTop: '12px',\r\n        fontSize: '1.5rem',\r\n    }\r\n}));\r\n\r\nconst UploadReadings = () => {\r\n\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const { selectedProjectId } = useProjectContext();\r\n    if (!selectedProjectId) history.push(\"/projects\");\r\n    const [selectedYear, setSelectedYear] = useState(new Date());\r\n    const [selectedMonth, setSelectedMonth] = useState(new Date());\r\n    const [file, setFile] = useState(null);\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [success, setSuccess] = useState(\"\")\r\n\r\n    const onSelectFile = (event) => {\r\n        setFile(event.target.files[0]);\r\n    }\r\n    const validateReadings = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        setSuccess(\"\");\r\n        setError(\"\");\r\n        if (!file) {\r\n            setError(\"Please Choose File\");\r\n        } else {\r\n            addUploadReadings();\r\n        }\r\n    }\r\n    const addUploadReadings = () => {\r\n        let formData = new FormData();\r\n        formData.append(\"csv\", file);\r\n        formData.append(\"projectId\", selectedProjectId);\r\n        formData.append(\"month\", (new Date(selectedMonth).getMonth() + 1).toString());\r\n        formData.append(\"year\", new Date(selectedYear).getFullYear().toString());\r\n        setLoading(true);\r\n        axios.post(`${config.restApiBase}/projects/updateReadings`, formData,\r\n            {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data',\r\n                    'Access-Control-Allow-Origin': '*'\r\n                }\r\n            }\r\n        ).then(response => {\r\n            let { data } = response;\r\n            data = data.data;\r\n            console.log(data);\r\n            if (data != null && data?.failedFlatsList != null && data?.failedFlatsList != undefined && data.failedFlatsList.length > 0) {\r\n                let ErrorTable = \"<table border='1' class='generateBillTable'><thead><tr><th>PropertyNo.</th><th>error</th><th>PropertyNo.</th><th>error</th><th>PropertyNo.</th><th>error</th></tr></thead><tbody>\";\r\n                let count = 0;\r\n                data?.failedFlatsList.forEach(element => {\r\n                    if (count == 0) ErrorTable += \"<tr>\";\r\n                    ErrorTable += `<td><b>${element.flatNo}</b></td><td>${element.error}</td>`;\r\n                    if (count == 2) { ErrorTable += \"</tr>\"; count = 0; } else { count++; }\r\n                });\r\n                ErrorTable += \"</tbody></table>\";\r\n                setSuccess(ErrorTable);\r\n                console.log(\"ErrorTable\", ErrorTable);\r\n            } else if (data != null && data.msg != undefined) {\r\n                setSuccess(data.msg);\r\n                console.log(\"data Message\", data.msg);\r\n            }\r\n            console.log(\"Message\", data);\r\n            setLoading(false);\r\n            //errorCtx.setSuccess(\"Bill Generated Successfully\");\r\n        }).catch((error) => {\r\n            setLoading(false);\r\n            setError(\"Unable to upload readings\");\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"project\">\r\n            <div className=\"project__header\">\r\n                <div className=\"project__body--heading\">View Bills</div>\r\n                <div className=\"project__header--filter\">\r\n                    <Link className=\"project__header--filter--button\" to={\"/billing/generateBills\"} >Generate Bill</Link>\r\n                </div>\r\n            </div>\r\n            <div className=\"project__body\">\r\n                <div className=\"project__body--content\">\r\n                    <div className=\"project__body--contentBody\">\r\n                        <form className={cm(classes.formBorder, \"ProjectForm\")} onSubmit={e => validateReadings(e)}>\r\n                            <div className={cm(classes.groups, \"wid23\")}>\r\n                                <label className=\"input-label\">Select Year</label>\r\n                                <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        className=\"input-text\"\r\n                                        variant=\"inline\"\r\n                                        format=\"YYYY\"\r\n                                        views={[\"year\"]}\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline\"\r\n                                        name=\"year\"\r\n                                        value={selectedYear}\r\n                                        onChange={date => { setSelectedYear(date); }}\r\n                                        autoOk\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </div>\r\n                            <div className={cm(classes.groups, \"wid23\")}>\r\n                                <label className=\"input-label\">Select Month</label>\r\n                                <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                    <KeyboardDatePicker\r\n                                        className=\"input-text\"\r\n                                        variant=\"inline\"\r\n                                        format=\"MMM\"\r\n                                        views={[\"month\"]}\r\n                                        margin=\"normal\"\r\n                                        id=\"date-picker-inline\"\r\n                                        name=\"month\"\r\n                                        value={selectedMonth}\r\n                                        onChange={date => { setSelectedMonth(date); }}\r\n                                        autoOk\r\n                                    />\r\n                                </MuiPickersUtilsProvider>\r\n                            </div>\r\n                            <div className={cm(classes.fileUploader, \"\")}>\r\n                                <label className=\"input-label\">Document</label>\r\n                                <FileUploader\r\n                                    selectedFile={file}\r\n                                    onSelectFile={onSelectFile}\r\n                                    accept=\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\r\n                                />\r\n                            </div>\r\n                            <div className={classes.btnGroups}>\r\n                                <button className={cm(\"project__header--filter--button materialBtn\")} type=\"submit\">\r\n                                    Upload Readings\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                        {loading &&\r\n                            <Loading />\r\n                        }\r\n                        {(success) &&\r\n                            <>\r\n                                <div className=\"error\">{error}</div>\r\n                                <div className=\"successBill\">{parse(success)}</div>\r\n                            </>\r\n                        }\r\n                        {(error && !success) &&\r\n                            <div className=\"error\">{error}</div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default UploadReadings;\r\n","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\WaveOff.js",["345","346","347","348","349","350","351","352","353","354","355","356","357","358"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\ViewBillsGrid.js",["359","360","361","362","363","364","365","366","367"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\WaveOffGrid.js",["368","369"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\table\\IndeterminateCheckbox.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\ElecColModels.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\FlatsModels.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\ProjectsModels.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Dashboard.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\Login.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\project\\Projects.js",["370","371","372"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useGet } from \"../../utils/hooks\";\r\nimport { LogException } from \"../../utils/exception\";\r\nimport Loading from '../Loading';\r\nimport ProjectGrid from '../grid/ProjectGrid';\r\nimport NoData from \"../NoData\";\r\nimport { useProjectActionsContext } from '../contexts/Project';\r\nimport AuthContext from \"../contexts/Auth\";\r\n\r\nconst Projects = () => {\r\n    const [projects, setProjects] = useState(null)\r\n    const [loading, setLoading] = useState(true);\r\n    const setSelectedProjectId = useProjectActionsContext();\r\n    const { user } = useContext(AuthContext);\r\n\r\n    const { run: getProjectList } = useGet(\"/projects\", null,\r\n        {\r\n            onResolve: (data) => {\r\n                setProjects(data.projects);\r\n                setLoading(false);\r\n            },\r\n            onReject: (error) => {\r\n                LogException(\"Unable to get ProjectList\", error);\r\n                setLoading(false);\r\n            }\r\n        });\r\n\r\n    useEffect(() => {\r\n        setSelectedProjectId(null);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        getProjectList();\r\n    }, [loading]);\r\n\r\n    const renderTransactions = () => {\r\n        if (loading) {\r\n            return <Loading />\r\n        } if (projects == null) {\r\n            return \"\";\r\n        } else if (projects && projects.length > 0) {\r\n            return <ProjectGrid projects={projects} />\r\n        } else {\r\n            return <NoData text=\"No Projects Found\" />;\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"project\">\r\n            <div className=\"project__header\">\r\n                <div className=\"project__body--heading\">\r\n                    All Projects\r\n                </div>\r\n                <div className=\"project__header--filter\">\r\n                    {(user && user.role == \"admin\") &&\r\n                        <Link to=\"/project/add\" className=\"projectId__header--filter--button\" >Add Project</Link>\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"project__body\">\r\n                <div className=\"project__body--content\">\r\n                    <div className=\"project__body--contentBody\">\r\n                        {loading ? <Loading /> : renderTransactions()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Projects;","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\user\\Users.js",["373","374","375","376"],"import React, { useState, useContext, useEffect } from 'react';\nimport Select from \"react-select\";\nimport cm from \"classnames\";\n\nimport { LogException } from '../../utils/exception';\nimport { useGet, usePost, usePut } from \"../../utils/hooks\";\nimport { errorContext } from \"../../components/contexts/error/errorContext\";\nimport NoData from \"../../components/NoData\";\nimport Loading from \"../../components/Loading\";\nimport unDraw from \"../../img/undraw.svg\";\nimport eye_black from \"../../img/lock.svg\";\nimport eye from \"../../img/unlock.svg\";\nimport pencil_black from \"../../img/pencil_black.svg\";\nimport \"./Users.scss\";\nimport Search from \"../customInputs/Search\";\n\nconst Users = () => {\n\n    const [searchText, setSearchText] = useState(\"\");\n    const [selectedMember, setSelectedMember] = useState(null);\n    const [edit, setEdit] = useState(false);\n    const errorCtx = useContext(errorContext);\n    const [team, setTeam] = useState(null)\n    const [oldTeam, setOldTeam] = useState(null)\n    const [loadGetData, setLoadGetData] = useState(true);\n    const [loading, setLoading] = useState(true)\n\n    const [name, setName] = useState(\"\");\n    const [id, setId] = useState(null);\n    const [email, setEmail] = useState(\"\");\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [role, setRole] = useState(\"member\");\n    const [success, setSuccess] = useState(false);\n\n    const { run: CreateMember } = usePost(\"/user\",\n        { name, email, phoneNumber, password, role },\n        {\n            onResolve: (data) => {\n                errorCtx.setSuccess(\"Member added\");\n                setSuccess(true);\n                setLoadGetData(true);\n            },\n            onReject: (err) => {\n                LogException(\"Unable to create user\", err);\n                errorCtx.setError(err);\n            }\n        });\n    const { run: UpdateMember } = usePut(\"/user/\" + id,\n        null,\n        {\n            onResolve: (data) => {\n                errorCtx.setSuccess(\"Member Updated\");\n                setSuccess(true);\n                setLoadGetData(true);\n            },\n            onReject: (err) => {\n                LogException(\"Unable to update user\", err);\n                errorCtx.setError(err);\n            }\n        });\n    const { run: updateTeamList } = useGet(\"/user\", null,\n        {\n            onResolve: (data) => {\n                setTeam(data.user);\n                setOldTeam(data.user);\n                setLoading(false);\n            },\n            onReject: (err) => {\n                LogException(\"Unable to get users\", err);\n                setLoading(false);\n            }\n        });\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        if (edit && id == null) {\n            CreateMember();\n        } else {\n            UpdateMember({ name, email, phoneNumber, password, role, isDisable: selectedMember.isDisable });\n        }\n    }\n\n    const addMember = (id) => {\n        resetMember();\n        if (id) {\n            let member = team.find(teamObject => teamObject.id == id);\n            member.role = !member.role ? \"member\" : member.role\n            setSelectedMember(member);\n            setName(member.name);\n            setId(member.id);\n            setEmail(member.email);\n            setPhoneNumber(member.phoneNumber);\n            setPassword(member.password);\n            setRole(member.role);\n        }\n        setEdit(true);\n    }\n\n    const resetMember = () => {\n        setId(null);\n        setName('');\n        setEmail('');\n        setPhoneNumber('');\n        setPassword('');\n        setRole(\"member\");\n        setSelectedMember({\n            id: null,\n            name: \"\",\n            email: \"\",\n            phoneNumber: \"\",\n            password: \"\",\n            role: \"member\",\n            isDisable: \"\",\n        });\n    }\n    useEffect(() => {\n        setLoadGetData(false);\n        updateTeamList();\n    }, [loadGetData]);\n\n    useEffect(() => {\n        setSuccess(false);\n        setName('');\n        setEmail('');\n        setPhoneNumber('');\n        setPassword('');\n        setRole(\"member\");\n    }, [success])\n\n    useEffect(() => {\n        setLoading(true);\n        searchUsers();\n    }, [searchText]);\n\n    const searchUsers = () => {\n        const searchValue = searchText;\n        let newUsers = [];\n        if (searchValue == \"\") {\n            newUsers = oldTeam;\n        } else {\n            newUsers = oldTeam?.filter(obj => {\n                return obj.name.toUpperCase().includes(searchValue.toUpperCase());\n            });\n        }\n        setTeam(newUsers);\n        setLoading(false);\n    }\n\n    const renderUsers = () => {\n        if (team && team.length > 0) {\n            return [\n                team.map(teamMember => {\n                    let { id, name, email, phoneNumber, role, isDisable } = teamMember;\n                    return (\n                        <div key={id} className={cm(\"parentGrid\", { \"parentGrid__active\": false })}\n                            onClick={() => {\n                                addMember(id)\n                                setEdit(true)\n                            }}\n                        >\n                            <div className=\"child1 \">\n                                <p className=\"text pointer\">{name}</p>\n                            </div>\n                            <div className=\"child2\">\n                                <p className=\"text pointer\">{email}</p>\n                            </div>\n                            <div className=\"child3 allignRight\">\n                                <p className=\"text pointer\">{phoneNumber}</p>\n                            </div>\n                            <div className=\"child4\">\n                                <p className=\"text pointer\">{role === \"admin\" ? \"Admin\" : \"Member\"}</p>\n                            </div>\n                            <div className=\"child5\">\n                                <img src={isDisable ? eye_black : eye} alt={\"search\"}\n                                    className=\"iconText pointer\"\n                                    onClick={(e) => {\n                                        e.stopPropagation()\n                                        errorCtx.setWarning(`This will This action will \n                                                         ${isDisable ? \"allow\" : \"prevent\"} \n                                                         your team member \n                                                         ${isDisable ? \"to\" : \"from\"} \n                                                         logging in to the system and use it\n                                                         `, () => {\n                                            //disableMember(id, !isDisable)\n                                        }, () => {\n                                        })\n                                    }} />\n                            </div>\n                            <div className=\"child6\">\n                                <img src={pencil_black} alt={\"edit\"} className=\"icon pointer\"\n                                    onClick={(e) => {\n                                        e.stopPropagation()\n                                        addMember(id);\n                                        setEdit(true)\n                                    }} />\n                            </div>\n                        </div>\n                    )\n                })\n            ]\n        } else {\n            return <NoData />;\n        }\n    }\n    return (\n        <div className=\"myTeam\">\n            <div className=\"midContainer\">\n                <div className=\"projectId__header\">\n                    <div className=\"projectId__body--heading\">\n                        <Search\n                            setSearchText={setSearchText}\n                            searchText={searchText}\n                            placeholder=\"Search users\"\n                        />\n                    </div>\n                    <div className=\"projectId__header--filter\">\n                        <button onClick={e => setEdit(true)} className=\"projectId__header--filter--button\" >Add User</button>\n                    </div>\n                </div>\n                <div className=\"midContainer__body\">\n                    <div key={0} className=\"parentGrid gridHeader\">\n                        <div className=\"child1\">\n                            <p className=\"text pointer\">Name</p>\n                        </div>\n                        <div className=\"child2\">\n                            <p className=\"text pointer\">Email</p>\n                        </div>\n                        <div className=\"child3 allignRight\">\n                            <p className=\"text pointer\">Phone No.</p>\n                        </div>\n                        <div className=\"child4\">\n                            <p className=\"text pointer\">Role</p>\n                        </div>\n                        <div className=\"child5\">\n                            <p className=\"text pointer\">Status</p>\n                        </div>\n                        <div className=\"child6\">\n                            <p className=\"text pointer\">Edit</p>\n                        </div>\n                    </div>\n                    {loading ? <Loading /> : <div className=\"projectGrid\">{renderUsers()}</div>}\n                </div>\n            </div>\n\n            {\n                edit &&\n                <div className=\"rightContainer\">\n                    <>\n                        <div className=\"detail\">\n                            <div className=\"dhead dheadActive\">\n                                <p className=\"dback pointer\" onClick={() => { resetMember(); setEdit(false); }}><b>&#10094;&nbsp; Back</b></p>\n                            </div>\n                            <div className=\"editContent\">\n                                <p className=\"editText\">\n                                    {id ? \"Edit\" : \"Add\"} team member's details</p>\n                                <form className=\"editContentForm\" onSubmit={submitHandler}>\n                                    <div className=\"editForm\">\n                                        <input\n                                            type=\"text\"\n                                            name=\"name\"\n                                            placeholder=\"Name\"\n                                            value={name}\n                                            className=\"editInput\"\n                                            onChange={(e) => setName(e.target.value)}\n                                        /></div>\n\n                                    <div className=\"editForm\">\n                                        <input\n                                            type=\"text\"\n                                            name=\"email\"\n                                            placeholder=\"Email\"\n                                            value={email}\n                                            className=\"editInput\"\n                                            onChange={(e) => setEmail(e.target.value)}\n                                        /></div>\n\n                                    <div className=\"editForm\">\n                                        <input\n                                            type=\"text\"\n                                            name=\"phoneNumber\"\n                                            placeholder=\"Phone Number\"\n                                            value={phoneNumber}\n                                            className=\"editInput\"\n                                            onChange={(e) => setPhoneNumber(e.target.value)}\n                                        /></div>\n                                    {!id &&\n                                        <div className=\"editForm\">\n                                            <input\n                                                type=\"password\"\n                                                name=\"password\"\n                                                placeholder=\"Password\"\n                                                value={password}\n                                                className=\"editInput\"\n                                                onChange={(e) => setPassword(e.target.value)}\n                                            />\n                                        </div>\n                                    }\n                                    <div className=\"editForm\">\n                                        <Select isSearchable={false}\n                                            styles={{\n                                                control: (styles, state) => ({\n                                                    ...styles, backgroundColor: '#eee', width: \"100%\", padding: \"0.5rem 2rem\", border: state.isFocused ? 0 : 0,\n                                                    // This line disable the blue border\n                                                    boxShadow: state.isFocused ? 0 : 0,\n                                                    '&:hover': {\n                                                        border: state.isFocused ? 0 : 0\n                                                    }\n                                                }),\n                                                // option: styles => ({ ...styles, width:\"90%\",padding:\"0.5rem 2rem\" }),\n                                                menu: styles => ({ ...styles, width: \"100%\" }),\n                                            }}\n                                            value={{ value: role, label: (role === \"member\" ? \"Team Member\" : \"Admin\") }}\n                                            onChange={(e) => { setRole(e.value); }}\n                                            options={[\n                                                { value: \"member\", label: \"Team Member\" },\n                                                { value: \"admin\", label: \"Admin\" },\n                                            ]} />\n                                    </div>\n                                    <button className={cm(\"blue_button\", \"dbutton\", \"editUp\", \"btn\")} type=\"submit\">\n                                        {id ? \"Update\" : \"Save\"}\n                                    </button>\n                                    <button className={cm(\"grey_button\", \"dbutton\", \"btn\")}\n                                        type={\"button\"}\n                                        onClick={() => {\n                                            setSelectedMember(null)\n                                            setEdit(false)\n                                        }}\n                                    >\n                                        cancel\n                                    </button>\n                                </form>\n                            </div>\n                        </div>\n                    </>\n                </div>\n            }\n\n            {\n                !edit && <div className=\"rightContainerEmpty\">\n                    <p className=\"editText\"> Select view or edit</p>\n                    <img src={unDraw} alt={\"search\"} className=\"image\" />\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default Users;","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\ViewHistoryGrid.js",["377","378","379"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\GenerateBill.js",["380","381","382","383","384","385"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from '@date-io/moment';\r\nimport { KeyboardDatePicker } from '@material-ui/pickers';\r\nimport parse from 'html-react-parser';\r\nimport React, { useState, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport cm from \"classnames\";\r\n\r\nimport Loading from \"../../components/Loading\";\r\n\r\nimport { LogException } from \"../../utils/exception\";\r\n//import './AddFlat.css'\r\n\r\n\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport MyTextInput from '../../components/customInputs/MyTextInput';\r\n\r\nimport { useProjectContext } from \"../contexts/Project\";\r\nimport AuthContext from \"../contexts/Auth\";\r\nimport { usePost } from \"../../utils/hooks\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    selectDropdown: {\r\n        color: '#495057',\r\n        border: '1px solid #ced4da',\r\n        outline: 'none',\r\n        fontSize: '14px',\r\n        padding: '10px',\r\n        borderRadius: '100px',\r\n        marginTop: '5px'\r\n    },\r\n    selectInputDiv: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '100%'\r\n    },\r\n    remarks: {\r\n        width: '100%',\r\n        margin: '10px 5px',\r\n        border: '2px solid gray',\r\n        borderRadius: '0.9rem',\r\n        height: '124px',\r\n        padding: '10px'\r\n    }\r\n}));\r\n\r\nconst GenerateBill = () => {\r\n    const BillStructure = {\r\n        billType: -1,\r\n        year: \"\",\r\n        month: \"\",\r\n        dueDate: \"\",\r\n        projId: \"\",\r\n        excludedFlats: \"\",\r\n    }\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n\r\n    const { user } = useContext(AuthContext);\r\n    const { selectedProjectId } = useProjectContext();\r\n    if (!selectedProjectId) history.push(\"/projects\");\r\n\r\n\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState(\"\")\r\n    const [success, setSuccess] = useState(\"\")\r\n    const [selectedYear, setSelectedYear] = useState(new Date());\r\n    const [selectedMonth, setSelectedMonth] = useState(new Date());\r\n\r\n    const { run: generateBill } = usePost(\"/billing/generateBill\",\r\n        null,\r\n        {\r\n            onResolve: (data) => {\r\n                if (data != null && data?.flatNo != null && data?.flatNo != undefined && data.flatNo.length > 0) {\r\n                    let ErrorTable = \"<table border='1' class='generateBillTable'><thead><tr><th>PropertyNo.</th><th>error</th><th>PropertyNo.</th><th>error</th><th>PropertyNo.</th><th>error</th></tr></thead><tbody>\";\r\n                    let count = 0;\r\n                    data?.flatNo.forEach(element => {\r\n                        if (count == 0) ErrorTable += \"<tr>\";\r\n                        ErrorTable += `<td><b>${element.flatNumber}</b></td><td>${element.error}</td>`;\r\n                        if (count == 2) { ErrorTable += \"</tr>\"; count = 0; } else { count++; }\r\n                    });\r\n                    ErrorTable += \"</tbody></table>\";\r\n                    setSuccess(ErrorTable);\r\n                } else if (data != null && data.message != undefined) {\r\n                    setSuccess(data.message);\r\n                }\r\n                //errorCtx.setSuccess(\"Bill Generated Successfully\");\r\n                setLoading(false);\r\n            },\r\n            onReject: (err) => {\r\n                setError(JSON.stringify(err));\r\n                setLoading(false);\r\n                LogException(\"Unable To Generate Bill\", err);\r\n                //errorCtx.setError(err);\r\n            }\r\n        });\r\n\r\n    const SaveBill = (values, setSubmitting) => {\r\n        setError(\"\");\r\n        setSuccess(\"\");\r\n        if (values.billType == \"-1\") {\r\n            setError(\"Please Choose billType\");\r\n        } else {\r\n            const yearString = new Date(selectedYear).getFullYear();\r\n            const monthString = new Date(selectedMonth).getMonth() + 1;\r\n            values.projId = selectedProjectId;\r\n            values.year = yearString.toString();\r\n            values.month = monthString.toString();\r\n            values.createdBy = user.id;\r\n            values.dueDate = values.dueDate.toString();\r\n            values.billType = parseInt(values.billType);\r\n            if (typeof values.excludedFlats == \"string\") {\r\n                values.excludedFlats = values.excludedFlats.split(\",\");\r\n            }\r\n            setLoading(true);\r\n            generateBill(values);\r\n            setTimeout(() => {\r\n                setSubmitting(false);\r\n            }, 400);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"project\">\r\n            <div className=\"project__header\">\r\n                <div className=\"project__body--heading\">Generate Bills</div>\r\n                <div className=\"project__header--filter\">\r\n                    <Link className=\"project__header--filter--button\" to={\"/billing/viewbills\"} >View All Bills</Link>\r\n                </div>\r\n            </div>\r\n            {loading &&\r\n                <div className=\"project__body\">\r\n                    <Loading />\r\n                </div>\r\n            }\r\n            {(success) &&\r\n                <div className=\"project__body\">\r\n                    <div className=\"project__body--content\">\r\n                        <div className=\"project__body--contentBody\">\r\n                            <div className=\"error\">{error}</div>\r\n                            <div className=\"successBill\">{parse(success)}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            {(error && !success) &&\r\n                <div className=\"project__body\">\r\n                    <div className=\"project__body--content\">\r\n                        <div className=\"project__body--contentBody\">\r\n                            <div className=\"error\">{error}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n            <div className=\"project__body\">\r\n                <div className=\"project__body--content\">\r\n                    <div className=\"project__body--contentBody\">\r\n                        <Formik\r\n                            enableReinitialize\r\n                            validateOnMount={true}\r\n                            initialValues={BillStructure}\r\n                            validationSchema={Yup.object({\r\n                                // projectsBillingInformations: Yup.object({\r\n                                //     CAM_penalize_percentage: Yup.string()\r\n                                //         .required('Required'),\r\n                                //     electricity_penalize_percentage: Yup.string()\r\n                                //         .required('Required'),\r\n                                //     IFMS_balance: Yup.string()\r\n                                //         .required('Required'),\r\n                                //     CAM_fixed_charge: Yup.string()\r\n                                //         .required('Required'),\r\n                                //     water_charge: Yup.string()\r\n                                //         .required('Required'),\r\n                                //     lift_charge: Yup.string()\r\n                                //         .required('Required'),\r\n                                //     CAM_charge_multiplier: Yup.string()\r\n                                //         .required('Required'),\r\n                                //     DG_charge_multiplier: Yup.string()\r\n                                //         .required('Required')\r\n                                // }),\r\n                                dueDate: Yup.string()\r\n                                    .required('Required')\r\n                                //billType: Yup.string()\r\n                                //.notOneOf(['0'])\r\n                                //.required('Please indicate your communications preference')\r\n                                //startedOn: Yup.string()\r\n                                //    .required('Required')\r\n                            })}\r\n                            onSubmit={(values, { setSubmitting }) => {\r\n                                SaveBill(values, setSubmitting);\r\n                            }}\r\n                            onReset={() => {\r\n                                setSelectedMonth(new Date());\r\n                                setSelectedYear(new Date());\r\n                                return BillStructure;\r\n                            }}\r\n                        >\r\n                            {props => {\r\n                                const {\r\n                                    handleChange\r\n                                } = props;\r\n                                return (\r\n                                    <Form className=\"ProjectForm\">\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group\">\r\n                                                <label className=\"input-label\">Bill Type</label>\r\n                                                <select name=\"billType\" onChange={handleChange} className={cm(classes.selectDropdown, \"input-text\")} >\r\n                                                    <option value=\"-1\">Choose Bill Type</option>\r\n                                                    <option value=\"1\">Cam</option>\r\n                                                    <option value=\"2\">Electricity</option>\r\n                                                    <option value=\"3\">Adhoc</option>\r\n                                                </select>\r\n                                            </div>\r\n                                            <MyTextInput\r\n                                                label=\"Due days\"\r\n                                                name=\"dueDate\"\r\n                                                type=\"number\"\r\n                                                placeholder=\"Due days\"\r\n                                                className=\"input-text wid50\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"form-group\">\r\n                                                <label className=\"input-label\">Select Year</label>\r\n                                                <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                                    <KeyboardDatePicker\r\n                                                        className=\"input-text\"\r\n                                                        variant=\"inline\"\r\n                                                        format=\"YYYY\"\r\n                                                        views={[\"year\"]}\r\n                                                        margin=\"normal\"\r\n                                                        id=\"date-picker-inline\"\r\n                                                        name=\"year\"\r\n                                                        value={selectedYear}\r\n                                                        onChange={date => { setSelectedYear(date); }}\r\n                                                        autoOk\r\n                                                    />\r\n                                                </MuiPickersUtilsProvider>\r\n                                            </div>\r\n                                            <div className=\"form-group\">\r\n                                                <label className=\"input-label\">Select Month</label>\r\n                                                <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                                    <KeyboardDatePicker\r\n                                                        className=\"input-text\"\r\n                                                        variant=\"inline\"\r\n                                                        format=\"MMM\"\r\n                                                        views={[\"month\"]}\r\n                                                        margin=\"normal\"\r\n                                                        id=\"date-picker-inline\"\r\n                                                        name=\"month\"\r\n                                                        value={selectedMonth}\r\n                                                        onChange={date => { setSelectedMonth(date); }}\r\n                                                        autoOk\r\n                                                    />\r\n                                                </MuiPickersUtilsProvider>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"form-group wid100\">\r\n                                            <label className=\"input-label\">Excluded Properties</label>\r\n                                            <textarea\r\n                                                onChange={handleChange}\r\n                                                name=\"excludedFlats\"\r\n                                                className={classes.remarks}\r\n                                                placeholder=\"Comma Seprated Property Nos.\">\r\n                                            </textarea>\r\n                                        </div>\r\n                                        <div className=\"row justify-center\">\r\n                                            <button disabled={loading == true ? true : \"\"} className={cm(\"blue_button\", \"dbutton\", \"editUp\", \"btn\")} type=\"submit\">\r\n                                                Generate\r\n                                                        </button>\r\n                                            <button className={cm(\"grey_button\", \"dbutton\", \"btn\")} type=\"reset\">Cancel</button>\r\n                                        </div>\r\n                                    </Form>\r\n                                );\r\n                            }}\r\n                        </Formik>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GenerateBill;\r\n","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\table\\Table.js",["386","387","388"],"import React, { useEffect } from 'react'\r\nimport { useTable, usePagination, useRowSelect, useSortBy, useFilters } from 'react-table'\r\nimport './Table.scss';\r\n\r\nfunction DefaultColumnFilter({\r\n    column: { filterValue, preFilteredRows, setFilter },\r\n}) {\r\n    const count = preFilteredRows.length\r\n\r\n    return (\r\n        <input\r\n            value={filterValue || ''}\r\n            onChange={e => {\r\n                setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\r\n            }}\r\n            className=\"tableFilter\"\r\n            placeholder={`Search ${count} records`}\r\n        />\r\n    )\r\n}\r\n\r\nconst Table = ({ columns, data, onRowSelect, onHandleRowClick, hiddenColumns }) => {\r\n    // Use the state and functions returned from useTable to build your UI\r\n    const defaultColumn = React.useMemo(\r\n        () => ({\r\n            // Let's set up our default Filter UI\r\n            Filter: DefaultColumnFilter,\r\n        }),\r\n        []\r\n    )\r\n    const filterTypes = React.useMemo(\r\n        () => ({\r\n            text: (rows, id, filterValue) => {\r\n                return rows.filter(row => {\r\n                    const rowValue = row.values[id]\r\n                    return rowValue !== undefined\r\n                        ? String(rowValue)\r\n                            .toLowerCase()\r\n                            .startsWith(String(filterValue).toLowerCase())\r\n                        : true\r\n                })\r\n            },\r\n        }),\r\n        []\r\n    )\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        prepareRow,\r\n        page, // Instead of using 'rows', we'll use page,\r\n        // which has only the rows for the active page\r\n\r\n        // The rest of these things are super handy, too ;)\r\n        canPreviousPage,\r\n        canNextPage,\r\n        pageOptions,\r\n        pageCount,\r\n        gotoPage,\r\n        nextPage,\r\n        previousPage,\r\n        setPageSize,\r\n        selectedFlatRows,\r\n        state: { pageIndex, pageSize }\r\n    } = useTable(\r\n        {\r\n            columns,\r\n            data,\r\n            defaultColumn,\r\n            filterTypes,\r\n            initialState: { hiddenColumns: hiddenColumns }\r\n        },\r\n        useFilters,\r\n        useSortBy,\r\n        usePagination,\r\n        useRowSelect\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (onRowSelect != undefined && selectedFlatRows != undefined) {\r\n            onRowSelect(selectedFlatRows);\r\n        }\r\n    }, [onRowSelect, selectedFlatRows]);\r\n    // Render the UI for your table\r\n    return (\r\n        <>\r\n            <table className=\"responsive-table\" {...getTableProps()}>\r\n                <thead>\r\n                    {headerGroups.map(headerGroup => (\r\n                        <tr {...headerGroup.getHeaderGroupProps()}>\r\n                            {headerGroup.headers.map(column => (\r\n                                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                                    {column.render('Header')}\r\n                                    <span>\r\n                                        {column.isSorted\r\n                                            ? column.isSortedDesc\r\n                                                ? ' 🔽'\r\n                                                : ' 🔼'\r\n                                            : ''}\r\n                                    </span>\r\n                                    <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\r\n                                </th>\r\n                            ))}\r\n                        </tr>\r\n                    ))}\r\n                </thead>\r\n                <tbody {...getTableBodyProps()}>\r\n                    {page.map((row, i) => {\r\n                        prepareRow(row)\r\n                        return (\r\n                            <tr\r\n                                style={{ cursor: 'pointer' }}\r\n                                onClick={(e) => { e.stopPropagation(); if (onHandleRowClick != undefined) onHandleRowClick(row.original.id); }}\r\n                                {...row.getRowProps()}>\r\n                                {row.cells.map(cell => {\r\n                                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"pagination\">\r\n                <div></div>\r\n                <div>\r\n                    <button className=\"\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n                        {'<<'}\r\n                    </button>{' '}\r\n                    <button className=\"\" onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n                        {'<'}\r\n                    </button>{' '}\r\n                    <span>{' '}\r\n                        | Page\r\n                        <input\r\n                            type=\"text\"\r\n                            defaultValue={pageIndex + 1}\r\n                            onChange={e => {\r\n                                const page = e.target.value ? Number(e.target.value) - 1 : 0\r\n                                gotoPage(page)\r\n                            }}\r\n                            style={{ width: '8%' }}\r\n                        /> of {pageOptions.length} |{' '}\r\n                    </span>{' '}\r\n                    <button className=\"\" onClick={() => nextPage()} disabled={!canNextPage}>\r\n                        {'>'}\r\n                    </button>{' '}\r\n                    <button className=\"\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\r\n                        {'>>'}\r\n                    </button>{' '}\r\n                    <select\r\n                        value={pageSize}\r\n                        onChange={e => {\r\n                            setPageSize(Number(e.target.value))\r\n                        }}\r\n                    >\r\n                        {[10, 15, 20, 25].map(pageSize => (\r\n                            <option key={pageSize} value={pageSize}>\r\n                                {pageSize}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n                <div>\r\n                    Page{' '}\r\n                    <strong>\r\n                        {pageIndex + 1} of {pageOptions.length}\r\n                    </strong>{' '}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Table;","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\utils\\PaidViaSet.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\ElecByIdModels.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\CamColModels.js",["389","390"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\report\\DownloadReport.js",["391","392","393","394","395","396","397","398","399","400","401","402"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\views\\DownloadBills.js",["403","404","405"],"\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport config from '../../config';\r\nimport parse from 'html-react-parser';\r\nimport ReactToPrint from 'react-to-print';\r\nimport { LogException } from '../../utils/exception';\r\nimport Loading from '../Loading';\r\nexport class Bill extends React.PureComponent {\r\n    render() {\r\n        return (<>{this.props.bills != null && <>{parse(this.props.bills)}</>}</>)\r\n    }\r\n}\r\nconst DownloadBills = () => {\r\n    const componentRef = useRef();\r\n    const { billType } = useParams();\r\n    const billIds = localStorage.getItem(\"downloadBillIds\").split(\",\");\r\n    const [bills, setBills] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const printBills = () => {\r\n        setError(\"\");\r\n        let printRequest = { billType: parseInt(billType), billId: billIds };\r\n        axios.post(`${config.restApiBase}/billing/getBillPDF`, printRequest).then(response => {\r\n            setLoading(false);\r\n            let { data } = response;\r\n            let dataResponse = data.data;\r\n            if (dataResponse.message != undefined) {\r\n                setBills(dataResponse.message);\r\n            } else {\r\n                let viewBillError = \"\"\r\n                if (dataResponse.error != undefined) {\r\n                    viewBillError = dataResponse.error;\r\n                    LogException(\"Unable To Print bills, Cause - \" + dataResponse);\r\n                }\r\n                setError(\"Unable to print Bills \" + viewBillError);\r\n            }\r\n        }).catch((error) => {\r\n            setLoading(false);\r\n            LogException(\"Unable To Print bills\" + error);\r\n            setError(\"Unable to print Bills Please Contact Tech Team\");\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (billType && billIds != null && billIds.length > 0)\r\n            printBills();\r\n    }, [billType])\r\n    return (\r\n        <>\r\n            {bills != null &&\r\n                <>\r\n                    <ReactToPrint\r\n                        trigger={() => <button>Print this out!</button>}\r\n                        content={() => componentRef.current}\r\n                        documentTitle=\"Omaxe-Bill\"\r\n                    />\r\n                    <Bill ref={componentRef} bills={bills} />\r\n                </>\r\n            }\r\n            {error && <div style={{ marginTop: \"10%\" }} className=\"error\">{error}</div>}\r\n            {loading && <div style={{ marginTop: \"10%\" }}><Loading /><div style={{ paddingTop: \"3%\", fontSize: \"20px\" }} className=\"success\">Fetching Bill...</div></div>}\r\n        </>\r\n    )\r\n\r\n}\r\nexport default DownloadBills;\r\n\r\n\r\n","E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\views\\PrintBill.js",["406","407","408"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\utils\\hooks.js",[],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\utils\\exception.js",["409"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\flat\\HistoryModal.js",["410","411","412","413","414","415"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\grid\\colmodels\\WaveOffModels.js",["416","417"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\AddPayment.js",["418","419","420","421","422","423","424","425"],"E:\\Free-Lancing Project\\OmaxeWebsite-master\\src\\components\\billing\\ChequeBounce.js",["426","427","428","429","430","431","432","433"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport React, { useState, useContext, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { LogException } from \"../../utils/exception\";\r\nimport Loading from \"../../components/Loading\";\r\nimport AuthContext from \"../contexts/Auth\";\r\nimport { usePost } from \"../../utils/hooks\";\r\nimport cm from \"classnames\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    groups: {\r\n        display: 'inline-block',\r\n    },\r\n    dropdownDiv: {\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        float: 'left',\r\n        width: '35%',\r\n        padding: '1.25rem'\r\n    },\r\n    selectInputDiv: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        width: '100%'\r\n    },\r\n    formBorder: {\r\n        border: '1px solid rgba(211,211,211,0.3)',\r\n        padding: '12px',\r\n        marginBottom: '20px',\r\n        display: 'flex',\r\n        alignItems: \"center\"\r\n    },\r\n    btnGroups: {\r\n        width: '22%',\r\n        display: 'inline-flex',\r\n        alignItems: 'center',\r\n        textAlign: 'center',\r\n        justifyContent: 'space-between',\r\n        padding: '1.1rem'\r\n    },\r\n    autocomplete: {\r\n        width: '35%',\r\n        padding: '1.1rem'\r\n    },\r\n    amountDiv: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        width: '20%',\r\n        padding: '1.1rem'\r\n    },\r\n}));\r\nconst ChequeBounce = () => {\r\n    const classes = useStyles();\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(\"\");\r\n    const [success, setSuccess] = useState(\"\");\r\n    const [receiptNo, setReceiptNo] = useState(\"\")\r\n    const [chequeNo, setChequeNo] = useState(\"\")\r\n    const [notification, setNotification] = useState(false);\r\n\r\n    const { user } = useContext(AuthContext);\r\n\r\n    const validateWaveOff = (event) => {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        setSuccess(\"\");\r\n        setError(\"\");\r\n        if (receiptNo == \"\") {\r\n            setError(\"Please provide Receipt no.\");\r\n        } else if (chequeNo == \"\") {\r\n            setError(\"Please provide Cheque no.\");\r\n        } else if (chequeNo.length != 5) {\r\n            setError(\"Please provide Valid Cheque no.\");\r\n        } else {\r\n            addChequeBouncePenality();\r\n        }\r\n    }\r\n\r\n    const { run: chequeBounceEntry } = usePost(\"/billing/chequeBounceEntry\",\r\n        null,\r\n        {\r\n            onResolve: (data) => {\r\n                if (data != null && data?.error != null) {\r\n                    setError(data.error);\r\n                } else if (data != null && data.message != undefined) {\r\n                    setSuccess(data.error);\r\n                }\r\n                setLoading(false);\r\n            },\r\n            onReject: (err) => {\r\n                setError(JSON.stringify(err));\r\n                setLoading(false);\r\n                LogException(\"Unable To Generate Bill\", err);\r\n            }\r\n        });\r\n\r\n    const addChequeBouncePenality = () => {\r\n        let bounceObject = {\r\n            receiptNo: receiptNo,\r\n            chequeNo: chequeNo,\r\n            sendNotification: notification,\r\n            updatedBy: user.id\r\n        }\r\n        chequeBounceEntry(bounceObject);\r\n    };\r\n    return (\r\n        <div className=\"project\">\r\n            <div className=\"project__header\">\r\n                <div className=\"project__body--heading\">Cheque Bounce Entry</div>\r\n                <div className=\"project__header--filter\">\r\n                    <Link to='/billing/viewbills' className=\"project__header--filter--button\">View Bills</Link>\r\n                </div>\r\n            </div>\r\n            <div className=\"project__body\">\r\n                <div className=\"project__body--content\">\r\n                    <div className=\"project__body--contentBody\">\r\n                        <form className={cm(classes.formBorder, \"ProjectForm\")} onSubmit={e => validateWaveOff(e)}>\r\n                            <div className={cm(classes.autocomplete, \"\")}>\r\n                                <input\r\n                                    placeholder=\"Receipt No.\"\r\n                                    className=\"input-text wid100\"\r\n                                    onChange={event => setReceiptNo(event.target.value)}\r\n                                />\r\n                            </div>\r\n                            <div className={cm(classes.dropdownDiv)}>\r\n                                <input\r\n                                    placeholder=\"Cheque No.\"\r\n                                    className=\"input-text wid100\"\r\n                                    onChange={event => setChequeNo(event.target.value)}\r\n                                />\r\n                                <div className=\"success\">{chequeError}</div>\r\n                            </div>\r\n                            <div className={cm(classes.amountDiv, \"\")}>\r\n                                <label className={cm(classes.CheckBox, \"form-check-label\")} style={{ wordWrap: 'break-word', fontSize: '1.6rem' }}>\r\n                                    <input type=\"checkbox\" onChange={(e) => e.target.checked ? setNotification(true) : setNotification(false)} style={{ verticalAlign: 'middle', marginRight: '0.26rem' }} />\r\n                                    Send Notification\r\n                                </label>\r\n                            </div>\r\n                            <div className={classes.btnGroups}>\r\n                                <button className={cm(\"project__header--filter--button materialBtn\")} type=\"submit\">\r\n                                    Add Penality\r\n                                </button>\r\n                            </div>\r\n                        </form>\r\n                        {error && <div className=\"error\">{error}</div>}\r\n                        {success && <div className=\"success\">{success}</div>}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default ChequeBounce;\r\n",{"ruleId":"434","replacedBy":"435"},{"ruleId":"436","replacedBy":"437"},{"ruleId":"434","replacedBy":"438"},{"ruleId":"436","replacedBy":"439"},{"ruleId":"440","severity":1,"message":"441","line":22,"column":81,"nodeType":"442","messageId":"443","endLine":22,"endColumn":83},{"ruleId":"440","severity":1,"message":"441","line":24,"column":153,"nodeType":"442","messageId":"443","endLine":24,"endColumn":155},{"ruleId":"444","severity":1,"message":"445","line":39,"column":8,"nodeType":"446","endLine":39,"endColumn":27,"suggestions":"447"},{"ruleId":"440","severity":1,"message":"441","line":61,"column":40,"nodeType":"442","messageId":"443","endLine":61,"endColumn":42},{"ruleId":"440","severity":1,"message":"441","line":83,"column":43,"nodeType":"442","messageId":"443","endLine":83,"endColumn":45},{"ruleId":"440","severity":1,"message":"441","line":98,"column":43,"nodeType":"442","messageId":"443","endLine":98,"endColumn":45},{"ruleId":"440","severity":1,"message":"441","line":109,"column":39,"nodeType":"442","messageId":"443","endLine":109,"endColumn":41},{"ruleId":"440","severity":1,"message":"441","line":117,"column":39,"nodeType":"442","messageId":"443","endLine":117,"endColumn":41},{"ruleId":"448","severity":1,"message":"449","line":8,"column":10,"nodeType":"450","messageId":"451","endLine":8,"endColumn":16},{"ruleId":"448","severity":1,"message":"452","line":8,"column":27,"nodeType":"450","messageId":"451","endLine":8,"endColumn":33},{"ruleId":"448","severity":1,"message":"453","line":27,"column":13,"nodeType":"450","messageId":"451","endLine":27,"endColumn":17},{"ruleId":"440","severity":1,"message":"441","line":49,"column":81,"nodeType":"442","messageId":"443","endLine":49,"endColumn":83},{"ruleId":"440","severity":1,"message":"441","line":50,"column":149,"nodeType":"442","messageId":"443","endLine":50,"endColumn":151},{"ruleId":"444","severity":1,"message":"454","line":80,"column":8,"nodeType":"446","endLine":80,"endColumn":19,"suggestions":"455"},{"ruleId":"444","severity":1,"message":"456","line":86,"column":8,"nodeType":"446","endLine":86,"endColumn":19,"suggestions":"457"},{"ruleId":"444","severity":1,"message":"458","line":91,"column":8,"nodeType":"446","endLine":91,"endColumn":20,"suggestions":"459"},{"ruleId":"440","severity":1,"message":"441","line":96,"column":25,"nodeType":"442","messageId":"443","endLine":96,"endColumn":27},{"ruleId":"448","severity":1,"message":"460","line":111,"column":11,"nodeType":"450","messageId":"451","endLine":111,"endColumn":23},{"ruleId":"448","severity":1,"message":"461","line":116,"column":95,"nodeType":"450","messageId":"451","endLine":116,"endColumn":104},{"ruleId":"434","replacedBy":"462"},{"ruleId":"436","replacedBy":"463"},{"ruleId":"440","severity":1,"message":"441","line":26,"column":93,"nodeType":"442","messageId":"443","endLine":26,"endColumn":95},{"ruleId":"440","severity":1,"message":"441","line":61,"column":81,"nodeType":"442","messageId":"443","endLine":61,"endColumn":83},{"ruleId":"440","severity":1,"message":"441","line":62,"column":149,"nodeType":"442","messageId":"443","endLine":62,"endColumn":151},{"ruleId":"444","severity":1,"message":"445","line":81,"column":8,"nodeType":"446","endLine":81,"endColumn":19,"suggestions":"464"},{"ruleId":"444","severity":1,"message":"465","line":135,"column":8,"nodeType":"446","endLine":135,"endColumn":17,"suggestions":"466"},{"ruleId":"434","replacedBy":"467"},{"ruleId":"436","replacedBy":"468"},{"ruleId":"448","severity":1,"message":"449","line":25,"column":10,"nodeType":"450","messageId":"451","endLine":25,"endColumn":16},{"ruleId":"448","severity":1,"message":"452","line":25,"column":27,"nodeType":"450","messageId":"451","endLine":25,"endColumn":33},{"ruleId":"444","severity":1,"message":"469","line":127,"column":8,"nodeType":"446","endLine":127,"endColumn":16,"suggestions":"470"},{"ruleId":"444","severity":1,"message":"471","line":188,"column":8,"nodeType":"446","endLine":188,"endColumn":17,"suggestions":"472"},{"ruleId":"473","severity":1,"message":"474","line":21,"column":13,"nodeType":"475","endLine":21,"endColumn":65},{"ruleId":"440","severity":1,"message":"441","line":122,"column":21,"nodeType":"442","messageId":"443","endLine":122,"endColumn":23},{"ruleId":"444","severity":1,"message":"476","line":171,"column":8,"nodeType":"446","endLine":171,"endColumn":16,"suggestions":"477"},{"ruleId":"444","severity":1,"message":"478","line":177,"column":8,"nodeType":"446","endLine":177,"endColumn":25,"suggestions":"479"},{"ruleId":"444","severity":1,"message":"480","line":183,"column":8,"nodeType":"446","endLine":183,"endColumn":17,"suggestions":"481"},{"ruleId":"440","severity":1,"message":"441","line":259,"column":59,"nodeType":"442","messageId":"443","endLine":259,"endColumn":61},{"ruleId":"440","severity":1,"message":"441","line":342,"column":43,"nodeType":"442","messageId":"443","endLine":342,"endColumn":45},{"ruleId":"440","severity":1,"message":"441","line":363,"column":43,"nodeType":"442","messageId":"443","endLine":363,"endColumn":45},{"ruleId":"440","severity":1,"message":"441","line":111,"column":85,"nodeType":"442","messageId":"443","endLine":111,"endColumn":87},{"ruleId":"444","severity":1,"message":"482","line":151,"column":8,"nodeType":"446","endLine":151,"endColumn":47,"suggestions":"483"},{"ruleId":"440","severity":1,"message":"484","line":154,"column":58,"nodeType":"442","messageId":"443","endLine":154,"endColumn":60},{"ruleId":"444","severity":1,"message":"485","line":157,"column":8,"nodeType":"446","endLine":157,"endColumn":31,"suggestions":"486"},{"ruleId":"444","severity":1,"message":"487","line":195,"column":8,"nodeType":"446","endLine":195,"endColumn":17,"suggestions":"488"},{"ruleId":"448","severity":1,"message":"489","line":281,"column":45,"nodeType":"450","messageId":"451","endLine":281,"endColumn":58},{"ruleId":"440","severity":1,"message":"441","line":309,"column":203,"nodeType":"442","messageId":"443","endLine":309,"endColumn":205},{"ruleId":"440","severity":1,"message":"441","line":309,"column":232,"nodeType":"442","messageId":"443","endLine":309,"endColumn":234},{"ruleId":"440","severity":1,"message":"441","line":310,"column":200,"nodeType":"442","messageId":"443","endLine":310,"endColumn":202},{"ruleId":"440","severity":1,"message":"441","line":310,"column":230,"nodeType":"442","messageId":"443","endLine":310,"endColumn":232},{"ruleId":"440","severity":1,"message":"441","line":40,"column":80,"nodeType":"442","messageId":"443","endLine":40,"endColumn":82},{"ruleId":"444","severity":1,"message":"490","line":14,"column":56,"nodeType":"446","endLine":14,"endColumn":58,"suggestions":"491"},{"ruleId":"444","severity":1,"message":"492","line":161,"column":8,"nodeType":"446","endLine":161,"endColumn":23,"suggestions":"493"},{"ruleId":"440","severity":1,"message":"441","line":166,"column":21,"nodeType":"442","messageId":"443","endLine":166,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":180,"column":41,"nodeType":"442","messageId":"443","endLine":180,"endColumn":43},{"ruleId":"444","severity":1,"message":"494","line":45,"column":8,"nodeType":"446","endLine":45,"endColumn":16,"suggestions":"495"},{"ruleId":"440","severity":1,"message":"484","line":24,"column":108,"nodeType":"442","messageId":"443","endLine":24,"endColumn":110},{"ruleId":"444","severity":1,"message":"496","line":56,"column":8,"nodeType":"446","endLine":56,"endColumn":16,"suggestions":"497"},{"ruleId":"440","severity":1,"message":"441","line":19,"column":51,"nodeType":"442","messageId":"443","endLine":19,"endColumn":53},{"ruleId":"448","severity":1,"message":"498","line":12,"column":10,"nodeType":"450","messageId":"451","endLine":12,"endColumn":22},{"ruleId":"440","severity":1,"message":"484","line":115,"column":88,"nodeType":"442","messageId":"443","endLine":115,"endColumn":90},{"ruleId":"440","severity":1,"message":"441","line":119,"column":31,"nodeType":"442","messageId":"443","endLine":119,"endColumn":33},{"ruleId":"440","severity":1,"message":"441","line":121,"column":31,"nodeType":"442","messageId":"443","endLine":121,"endColumn":33},{"ruleId":"440","severity":1,"message":"484","line":126,"column":49,"nodeType":"442","messageId":"443","endLine":126,"endColumn":51},{"ruleId":"440","severity":1,"message":"484","line":119,"column":39,"nodeType":"442","messageId":"443","endLine":119,"endColumn":41},{"ruleId":"440","severity":1,"message":"484","line":131,"column":36,"nodeType":"442","messageId":"443","endLine":131,"endColumn":38},{"ruleId":"444","severity":1,"message":"499","line":148,"column":8,"nodeType":"446","endLine":148,"endColumn":24,"suggestions":"500"},{"ruleId":"444","severity":1,"message":"501","line":152,"column":8,"nodeType":"446","endLine":152,"endColumn":10,"suggestions":"502"},{"ruleId":"444","severity":1,"message":"503","line":157,"column":8,"nodeType":"446","endLine":157,"endColumn":16,"suggestions":"504"},{"ruleId":"440","severity":1,"message":"484","line":160,"column":22,"nodeType":"442","messageId":"443","endLine":160,"endColumn":24},{"ruleId":"505","severity":1,"message":"506","line":163,"column":13,"nodeType":"507","messageId":"508","endLine":180,"endColumn":14},{"ruleId":"440","severity":1,"message":"484","line":165,"column":51,"nodeType":"442","messageId":"443","endLine":165,"endColumn":53},{"ruleId":"440","severity":1,"message":"484","line":173,"column":51,"nodeType":"442","messageId":"443","endLine":173,"endColumn":53},{"ruleId":"444","severity":1,"message":"509","line":182,"column":8,"nodeType":"446","endLine":182,"endColumn":18,"suggestions":"510"},{"ruleId":"440","severity":1,"message":"441","line":190,"column":20,"nodeType":"442","messageId":"443","endLine":190,"endColumn":22},{"ruleId":"440","severity":1,"message":"441","line":192,"column":29,"nodeType":"442","messageId":"443","endLine":192,"endColumn":31},{"ruleId":"440","severity":1,"message":"441","line":194,"column":27,"nodeType":"442","messageId":"443","endLine":194,"endColumn":29},{"ruleId":"440","severity":1,"message":"441","line":257,"column":45,"nodeType":"442","messageId":"443","endLine":257,"endColumn":47},{"ruleId":"440","severity":1,"message":"441","line":24,"column":27,"nodeType":"442","messageId":"443","endLine":24,"endColumn":29},{"ruleId":"444","severity":1,"message":"490","line":48,"column":9,"nodeType":"446","endLine":48,"endColumn":11,"suggestions":"511"},{"ruleId":"440","severity":1,"message":"441","line":51,"column":53,"nodeType":"442","messageId":"443","endLine":51,"endColumn":55},{"ruleId":"440","severity":1,"message":"441","line":51,"column":100,"nodeType":"442","messageId":"443","endLine":51,"endColumn":102},{"ruleId":"440","severity":1,"message":"484","line":59,"column":72,"nodeType":"442","messageId":"443","endLine":59,"endColumn":74},{"ruleId":"440","severity":1,"message":"441","line":63,"column":35,"nodeType":"442","messageId":"443","endLine":63,"endColumn":37},{"ruleId":"440","severity":1,"message":"441","line":65,"column":35,"nodeType":"442","messageId":"443","endLine":65,"endColumn":37},{"ruleId":"440","severity":1,"message":"484","line":69,"column":57,"nodeType":"442","messageId":"443","endLine":69,"endColumn":59},{"ruleId":"440","severity":1,"message":"441","line":121,"column":51,"nodeType":"442","messageId":"443","endLine":121,"endColumn":53},{"ruleId":"505","severity":1,"message":"506","line":7,"column":39,"nodeType":"507","messageId":"508","endLine":7,"endColumn":149},{"ruleId":"444","severity":1,"message":"490","line":10,"column":56,"nodeType":"446","endLine":10,"endColumn":58,"suggestions":"512"},{"ruleId":"444","severity":1,"message":"513","line":31,"column":8,"nodeType":"446","endLine":31,"endColumn":10,"suggestions":"514"},{"ruleId":"444","severity":1,"message":"515","line":35,"column":8,"nodeType":"446","endLine":35,"endColumn":17,"suggestions":"516"},{"ruleId":"440","severity":1,"message":"441","line":55,"column":41,"nodeType":"442","messageId":"443","endLine":55,"endColumn":43},{"ruleId":"440","severity":1,"message":"441","line":87,"column":64,"nodeType":"442","messageId":"443","endLine":87,"endColumn":66},{"ruleId":"444","severity":1,"message":"517","line":120,"column":8,"nodeType":"446","endLine":120,"endColumn":21,"suggestions":"518"},{"ruleId":"444","severity":1,"message":"519","line":134,"column":8,"nodeType":"446","endLine":134,"endColumn":20,"suggestions":"520"},{"ruleId":"440","severity":1,"message":"441","line":139,"column":25,"nodeType":"442","messageId":"443","endLine":139,"endColumn":27},{"ruleId":"448","severity":1,"message":"521","line":1,"column":17,"nodeType":"450","messageId":"451","endLine":1,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":9,"column":27,"nodeType":"442","messageId":"443","endLine":9,"endColumn":29},{"ruleId":"444","severity":1,"message":"490","line":27,"column":9,"nodeType":"446","endLine":27,"endColumn":11,"suggestions":"522"},{"ruleId":"440","severity":1,"message":"484","line":80,"column":74,"nodeType":"442","messageId":"443","endLine":80,"endColumn":76},{"ruleId":"440","severity":1,"message":"441","line":84,"column":35,"nodeType":"442","messageId":"443","endLine":84,"endColumn":37},{"ruleId":"440","severity":1,"message":"441","line":86,"column":35,"nodeType":"442","messageId":"443","endLine":86,"endColumn":37},{"ruleId":"440","severity":1,"message":"484","line":90,"column":57,"nodeType":"442","messageId":"443","endLine":90,"endColumn":59},{"ruleId":"440","severity":1,"message":"441","line":107,"column":29,"nodeType":"442","messageId":"443","endLine":107,"endColumn":31},{"ruleId":"440","severity":1,"message":"441","line":274,"column":71,"nodeType":"442","messageId":"443","endLine":274,"endColumn":73},{"ruleId":"440","severity":1,"message":"484","line":80,"column":25,"nodeType":"442","messageId":"443","endLine":80,"endColumn":27},{"ruleId":"440","severity":1,"message":"484","line":80,"column":58,"nodeType":"442","messageId":"443","endLine":80,"endColumn":60},{"ruleId":"440","severity":1,"message":"484","line":113,"column":93,"nodeType":"442","messageId":"443","endLine":113,"endColumn":95},{"ruleId":"448","severity":1,"message":"523","line":9,"column":10,"nodeType":"450","messageId":"451","endLine":9,"endColumn":34},{"ruleId":"448","severity":1,"message":"524","line":9,"column":36,"nodeType":"450","messageId":"451","endLine":9,"endColumn":53},{"ruleId":"448","severity":1,"message":"525","line":5,"column":38,"nodeType":"450","messageId":"451","endLine":5,"endColumn":48},{"ruleId":"448","severity":1,"message":"526","line":7,"column":8,"nodeType":"450","messageId":"451","endLine":7,"endColumn":21},{"ruleId":"448","severity":1,"message":"527","line":8,"column":8,"nodeType":"450","messageId":"451","endLine":8,"endColumn":14},{"ruleId":"448","severity":1,"message":"528","line":9,"column":8,"nodeType":"450","messageId":"451","endLine":9,"endColumn":15},{"ruleId":"448","severity":1,"message":"529","line":10,"column":10,"nodeType":"450","messageId":"451","endLine":10,"endColumn":14},{"ruleId":"448","severity":1,"message":"530","line":17,"column":10,"nodeType":"450","messageId":"451","endLine":17,"endColumn":16},{"ruleId":"448","severity":1,"message":"531","line":17,"column":18,"nodeType":"450","messageId":"451","endLine":17,"endColumn":22},{"ruleId":"448","severity":1,"message":"524","line":19,"column":10,"nodeType":"450","messageId":"451","endLine":19,"endColumn":27},{"ruleId":"448","severity":1,"message":"532","line":20,"column":18,"nodeType":"450","messageId":"451","endLine":20,"endColumn":25},{"ruleId":"448","severity":1,"message":"533","line":24,"column":8,"nodeType":"450","messageId":"451","endLine":24,"endColumn":19},{"ruleId":"448","severity":1,"message":"534","line":58,"column":11,"nodeType":"450","messageId":"451","endLine":58,"endColumn":18},{"ruleId":"444","severity":1,"message":"515","line":117,"column":8,"nodeType":"446","endLine":117,"endColumn":10,"suggestions":"535"},{"ruleId":"440","severity":1,"message":"484","line":30,"column":38,"nodeType":"442","messageId":"443","endLine":30,"endColumn":40},{"ruleId":"440","severity":1,"message":"484","line":34,"column":40,"nodeType":"442","messageId":"443","endLine":34,"endColumn":42},{"ruleId":"444","severity":1,"message":"536","line":50,"column":8,"nodeType":"446","endLine":50,"endColumn":18,"suggestions":"537"},{"ruleId":"440","severity":1,"message":"484","line":30,"column":42,"nodeType":"442","messageId":"443","endLine":30,"endColumn":44},{"ruleId":"440","severity":1,"message":"484","line":34,"column":44,"nodeType":"442","messageId":"443","endLine":34,"endColumn":46},{"ruleId":"444","severity":1,"message":"538","line":50,"column":8,"nodeType":"446","endLine":50,"endColumn":18,"suggestions":"539"},{"ruleId":"440","severity":1,"message":"441","line":4,"column":30,"nodeType":"442","messageId":"443","endLine":4,"endColumn":32},{"ruleId":"440","severity":1,"message":"441","line":101,"column":21,"nodeType":"442","messageId":"443","endLine":101,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":111,"column":26,"nodeType":"442","messageId":"443","endLine":111,"endColumn":28},{"ruleId":"440","severity":1,"message":"441","line":126,"column":22,"nodeType":"442","messageId":"443","endLine":126,"endColumn":24},{"ruleId":"440","severity":1,"message":"441","line":128,"column":29,"nodeType":"442","messageId":"443","endLine":128,"endColumn":31},{"ruleId":"440","severity":1,"message":"441","line":153,"column":34,"nodeType":"442","messageId":"443","endLine":153,"endColumn":36},{"ruleId":"440","severity":1,"message":"441","line":171,"column":34,"nodeType":"442","messageId":"443","endLine":171,"endColumn":36},{"ruleId":"448","severity":1,"message":"529","line":1,"column":10,"nodeType":"450","messageId":"451","endLine":1,"endColumn":14},{"ruleId":"540","severity":1,"message":"541","line":40,"column":31,"nodeType":"542","endLine":40,"endColumn":46},{"ruleId":"440","severity":1,"message":"441","line":133,"column":21,"nodeType":"442","messageId":"443","endLine":133,"endColumn":23},{"ruleId":"440","severity":1,"message":"441","line":135,"column":45,"nodeType":"442","messageId":"443","endLine":135,"endColumn":47},{"ruleId":"440","severity":1,"message":"441","line":137,"column":28,"nodeType":"442","messageId":"443","endLine":137,"endColumn":30},{"ruleId":"440","severity":1,"message":"441","line":137,"column":73,"nodeType":"442","messageId":"443","endLine":137,"endColumn":75},{"ruleId":"440","severity":1,"message":"441","line":139,"column":28,"nodeType":"442","messageId":"443","endLine":139,"endColumn":30},{"ruleId":"440","severity":1,"message":"484","line":139,"column":61,"nodeType":"442","messageId":"443","endLine":139,"endColumn":63},{"ruleId":"440","severity":1,"message":"441","line":141,"column":54,"nodeType":"442","messageId":"443","endLine":141,"endColumn":56},{"ruleId":"440","severity":1,"message":"441","line":192,"column":34,"nodeType":"442","messageId":"443","endLine":192,"endColumn":36},{"ruleId":"448","severity":1,"message":"543","line":2,"column":39,"nodeType":"450","messageId":"451","endLine":2,"endColumn":48},{"ruleId":"448","severity":1,"message":"544","line":5,"column":8,"nodeType":"450","messageId":"451","endLine":5,"endColumn":15},{"ruleId":"448","severity":1,"message":"545","line":55,"column":12,"nodeType":"450","messageId":"451","endLine":55,"endColumn":19},{"ruleId":"440","severity":1,"message":"441","line":70,"column":23,"nodeType":"442","messageId":"443","endLine":70,"endColumn":25},{"ruleId":"440","severity":1,"message":"441","line":72,"column":29,"nodeType":"442","messageId":"443","endLine":72,"endColumn":31},{"ruleId":"440","severity":1,"message":"484","line":74,"column":36,"nodeType":"442","messageId":"443","endLine":74,"endColumn":38},{"ruleId":"440","severity":1,"message":"484","line":87,"column":57,"nodeType":"442","messageId":"443","endLine":87,"endColumn":59},{"ruleId":"546","severity":2,"message":"547","line":133,"column":59,"nodeType":"450","messageId":"548","endLine":133,"endColumn":70},"no-native-reassign",["549"],"no-negated-in-lhs",["550"],["549"],["550"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getProjectById'. Either include it or remove the dependency array.","ArrayExpression",["551"],"no-unused-vars","'useGet' is defined but never used.","Identifier","unusedVar","'usePut' is defined but never used.","'user' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getFlatsList', 'getProjectById', and 'setSelectedProjectId'. Either include them or remove the dependency array.",["552"],"React Hook useEffect has missing dependencies: 'getFlatsList' and 'projectId'. Either include them or remove the dependency array.",["553"],"React Hook useEffect has a missing dependency: 'searchFlats'. Either include it or remove the dependency array.",["554"],"'goToEditFlat' is assigned a value but never used.","'projectId' is assigned a value but never used.",["549"],["550"],["555"],"React Hook useEffect has a missing dependency: 'projectStructure'. Either include it or remove the dependency array.",["556"],["549"],["550"],"React Hook useEffect has a missing dependency: 'getFlatById'. Either include it or remove the dependency array.",["557"],"React Hook useEffect has a missing dependency: 'FlatStructure'. Either include it or remove the dependency array.",["558"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getFlatDetails'. Either include it or remove the dependency array.",["559"],"React Hook useEffect has missing dependencies: 'getElectricityDetails' and 'request'. Either include them or remove the dependency array.",["560"],"React Hook useEffect has missing dependencies: 'getCamDetails' and 'request'. Either include them or remove the dependency array.",["561"],"React Hook useEffect has a missing dependency: 'getBillingHeads'. Either include it or remove the dependency array.",["562"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'getBillingHeadById' and 'selectedProjectId'. Either include them or remove the dependency array.",["563"],"React Hook useEffect has a missing dependency: 'billingHeadStructure'. Either include it or remove the dependency array.",["564"],"'setFieldValue' is assigned a value but never used.","React Hook React.useMemo has a missing dependency: 'models'. Either include it or remove the dependency array.",["565"],"React Hook useEffect has missing dependencies: 'viewBillRequest' and 'viewBills'. Either include them or remove the dependency array.",["566"],"React Hook useEffect has a missing dependency: 'getTransactions'. Either include it or remove the dependency array.",["567"],"React Hook useEffect has missing dependencies: 'downloadTransactions' and 'flatId'. Either include them or remove the dependency array.",["568"],"'LogException' is defined but never used.","React Hook useEffect has a missing dependency: 'getWaveOffs'. Either include it or remove the dependency array.",["569"],"React Hook useEffect has a missing dependency: 'getFlatsList'. Either include it or remove the dependency array.",["570"],"React Hook useEffect has missing dependencies: 'getDues' and 'selectedProjectId'. Either include them or remove the dependency array.",["571"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'duesData'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setBillId' needs the current value of 'duesData'.",["572"],["573"],["574"],"React Hook useEffect has a missing dependency: 'setSelectedProjectId'. Either include it or remove the dependency array.",["575"],"React Hook useEffect has a missing dependency: 'getProjectList'. Either include it or remove the dependency array.",["576"],"React Hook useEffect has a missing dependency: 'updateTeamList'. Either include it or remove the dependency array.",["577"],"React Hook useEffect has a missing dependency: 'searchUsers'. Either include it or remove the dependency array.",["578"],"'useState' is defined but never used.",["579"],"'useProjectActionsContext' is defined but never used.","'useProjectContext' is defined but never used.","'useContext' is defined but never used.","'ViewBillsGrid' is defined but never used.","'NoData' is defined but never used.","'PaidVia' is defined but never used.","'Link' is defined but never used.","'Formik' is defined but never used.","'Form' is defined but never used.","'usePost' is defined but never used.","'AuthContext' is defined but never used.","'history' is assigned a value but never used.",["580"],"React Hook useEffect has missing dependencies: 'billIds' and 'printBills'. Either include them or remove the dependency array.",["581"],"React Hook useEffect has a missing dependency: 'billId'. Either include it or remove the dependency array.",["582"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'useEffect' is defined but never used.","'Loading' is defined but never used.","'loading' is assigned a value but never used.","no-undef","'chequeError' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"583","fix":"584"},{"desc":"585","fix":"586"},{"desc":"587","fix":"588"},{"desc":"589","fix":"590"},{"desc":"591","fix":"592"},{"desc":"593","fix":"594"},{"desc":"595","fix":"596"},{"desc":"597","fix":"598"},{"desc":"599","fix":"600"},{"desc":"601","fix":"602"},{"desc":"603","fix":"604"},{"desc":"605","fix":"606"},{"desc":"607","fix":"608"},{"desc":"609","fix":"610"},{"desc":"611","fix":"612"},{"desc":"613","fix":"614"},{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},{"desc":"619","fix":"620"},{"desc":"621","fix":"622"},{"desc":"623","fix":"624"},{"desc":"625","fix":"626"},{"desc":"611","fix":"627"},{"desc":"611","fix":"628"},{"desc":"629","fix":"630"},{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"611","fix":"637"},{"desc":"638","fix":"639"},{"desc":"640","fix":"641"},{"desc":"642","fix":"643"},"Update the dependencies array to be: [getProjectById, selectedProjectId]",{"range":"644","text":"645"},"Update the dependencies array to be: [getFlatsList, getProjectById, projectId, setSelectedProjectId]",{"range":"646","text":"647"},"Update the dependencies array to be: [getFlatsList, loadFlats, projectId]",{"range":"648","text":"649"},"Update the dependencies array to be: [searchFlats, searchText]",{"range":"650","text":"651"},"Update the dependencies array to be: [getProjectById, projectId]",{"range":"652","text":"653"},"Update the dependencies array to be: [isReset, projectStructure]",{"range":"654","text":"655"},"Update the dependencies array to be: [flatId, getFlatById]",{"range":"656","text":"657"},"Update the dependencies array to be: [FlatStructure, isReset]",{"range":"658","text":"659"},"Update the dependencies array to be: [flatId, getFlatDetails]",{"range":"660","text":"661"},"Update the dependencies array to be: [getElectricityDetails, loadElectricity, request]",{"range":"662","text":"663"},"Update the dependencies array to be: [getCamDetails, loadCam, request]",{"range":"664","text":"665"},"Update the dependencies array to be: [selectedProjectId, isLoadBillingHeads, getBillingHeads]",{"range":"666","text":"667"},"Update the dependencies array to be: [isEdit, billingHeadId, selectedProjectId, getBillingHeadById]",{"range":"668","text":"669"},"Update the dependencies array to be: [billingHeadStructure, isReset]",{"range":"670","text":"671"},"Update the dependencies array to be: [models]",{"range":"672","text":"673"},"Update the dependencies array to be: [loadViewBills, viewBillRequest, viewBills]",{"range":"674","text":"675"},"Update the dependencies array to be: [billId, getTransactions]",{"range":"676","text":"677"},"Update the dependencies array to be: [billId, downloadTransactions, flatId]",{"range":"678","text":"679"},"Update the dependencies array to be: [getWaveOffs, isloadWaveOffs]",{"range":"680","text":"681"},"Update the dependencies array to be: [getFlatsList]",{"range":"682","text":"683"},"Update the dependencies array to be: [flatNo, getDues, selectedProjectId]",{"range":"684","text":"685"},"Update the dependencies array to be: [billType, duesData]",{"range":"686","text":"687"},{"range":"688","text":"673"},{"range":"689","text":"673"},"Update the dependencies array to be: [setSelectedProjectId]",{"range":"690","text":"691"},"Update the dependencies array to be: [getProjectList, loading]",{"range":"692","text":"693"},"Update the dependencies array to be: [loadGetData, updateTeamList]",{"range":"694","text":"695"},"Update the dependencies array to be: [searchText, searchUsers]",{"range":"696","text":"697"},{"range":"698","text":"673"},"Update the dependencies array to be: [getProjectList]",{"range":"699","text":"700"},"Update the dependencies array to be: [billIds, billType, printBills]",{"range":"701","text":"702"},"Update the dependencies array to be: [billId, billType]",{"range":"703","text":"704"},[1538,1557],"[getProjectById, selectedProjectId]",[3083,3094],"[getFlatsList, getProjectById, projectId, setSelectedProjectId]",[3233,3244],"[getFlatsList, loadFlats, projectId]",[3331,3343],"[searchFlats, searchText]",[2700,2711],"[getProjectById, projectId]",[4580,4589],"[isReset, projectStructure]",[4522,4530],"[flatId, getFlatById]",[6493,6502],"[FlatStructure, isReset]",[5568,5576],"[flatId, getFlatDetails]",[5700,5717],"[getElectricityDetails, loadElectricity, request]",[5825,5834],"[getCamDetails, loadCam, request]",[4788,4827],"[selectedProjectId, isLoadBillingHeads, getBillingHeads]",[5037,5060],"[isEdit, billingHeadId, selectedProjectId, getBillingHeadById]",[6298,6307],"[billingHeadStructure, isReset]",[506,508],"[models]",[5445,5460],"[loadViewBills, viewBillRequest, viewBills]",[1490,1498],"[billId, getTransactions]",[2224,2232],"[billId, downloadTransactions, flatId]",[4964,4980],"[getWaveOffs, isloadWaveOffs]",[5041,5043],"[getFlatsList]",[5199,5207],"[flatNo, getDues, selectedProjectId]",[6175,6185],"[billType, duesData]",[2058,2060],[544,546],[1118,1120],"[setSelectedProjectId]",[1183,1192],"[getProjectList, loading]",[3941,3954],"[loadGetData, updateTeamList]",[4227,4239],"[searchText, searchUsers]",[983,985],[4060,4062],"[getProjectList]",[1980,1990],"[billIds, billType, printBills]",[1933,1943],"[billId, billType]"]